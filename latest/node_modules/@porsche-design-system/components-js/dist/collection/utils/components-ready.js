let loadingQueueCount = 0;
let resolvePromiseTimeout = null;
let onLoadedPromise;
let resolveOnLoadedPromise;
const checkForPromiseResolve = () => {
    if (loadingQueueCount === 0) {
        /**
         * we debounce 30ms, because the loader is doing the
         * same for the "hydrated" class
         */
        resolvePromiseTimeout = window.setTimeout(() => {
            resolveOnLoadedPromise();
            createOnLoadedPromise();
        }, 30);
    }
};
const createOnLoadedPromise = () => {
    onLoadedPromise = new Promise(resolve => {
        resolveOnLoadedPromise = resolve;
    });
};
createOnLoadedPromise();
/**
 * stencil starts to lazy load a component
 */
window.addEventListener('stencil_componentWillLoad', () => {
    loadingQueueCount++;
    if (resolvePromiseTimeout) {
        window.clearTimeout(resolvePromiseTimeout);
    }
});
/**
 * stencil finished to lazy load a component
 */
window.addEventListener('stencil_componentDidLoad', () => {
    loadingQueueCount--;
    checkForPromiseResolve();
});
export const componentsReady = () => {
    checkForPromiseResolve();
    return onLoadedPromise;
};
