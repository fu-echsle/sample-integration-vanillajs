import JSON5 from 'json5';
import { prefix } from './prefix';
var Breakpoint;
(function (Breakpoint) {
    Breakpoint["base"] = "base";
    Breakpoint["xs"] = "xs";
    Breakpoint["s"] = "s";
    Breakpoint["m"] = "m";
    Breakpoint["l"] = "l";
    Breakpoint["xl"] = "xl";
})(Breakpoint || (Breakpoint = {}));
const parseJSON5 = (prop) => {
    if (typeof prop === 'string') {
        try {
            // prop is JSON5 string, e.g. "{ base: 'block', l: 'inline' }"
            return JSON5.parse(prop);
        }
        catch (error) {
            // prop is string, e.g. "block" or "inline"
            return prop;
        }
    }
    // prop is object, e.g. { base: 'block', l: 'inline' }
    // or number, e.g. 123
    // or boolean, e.g. true
    return prop;
};
const getClassName = (value, classSuffixes) => {
    if (typeof value === 'boolean') {
        return value ? classSuffixes[0] : classSuffixes[1];
    }
    return value.toString();
};
const getBreakpointSuffix = (breakpoint) => {
    if (breakpoint !== 'base') {
        return `-${breakpoint}`;
    }
    return '';
};
const createClass = (classPrefix, value, breakpoint, classSuffixes) => {
    if (value === undefined || value === null) {
        return {};
    }
    const className = getClassName(value, classSuffixes);
    const breakpointSuffix = getBreakpointSuffix(breakpoint);
    return {
        [prefix(`${classPrefix}-${className}${breakpointSuffix}`)]: true
    };
};
/**
 *
 * @param classPrefix
 * @param prop
 * @param classSuffixes
 *  First value in array is used for true boolean values, second for false.
 *  It's only used when prop is a boolean or prop is a object/JSON5 that contains a boolean.
 */
export const mapBreakpointPropToPrefixedClasses = (classPrefix, prop, classSuffixes) => {
    const parsedProp = parseJSON5(prop);
    if (typeof parsedProp === 'object') {
        return Object.entries(parsedProp).reduce((classes, [breakpoint, value]) => (Object.assign(Object.assign({}, classes), createClass(classPrefix, value, breakpoint, classSuffixes))), {});
    }
    return createClass(classPrefix, parsedProp, Breakpoint.base, classSuffixes);
};
