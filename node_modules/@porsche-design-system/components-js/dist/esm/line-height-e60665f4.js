import './breakpointCustomizable-f03211e4.js';

const FONT_SIZE_REGEX = /^(\d+\.?\d*)(rem|px)$/;
const REM_BASE = 16;
const remToPx = (rem) => {
    var _a;
    const [, fontSizeValue, fontSizeUnit] = (_a = rem === null || rem === void 0 ? void 0 : rem.match(FONT_SIZE_REGEX)) !== null && _a !== void 0 ? _a : [];
    if (fontSizeUnit !== 'rem' || fontSizeValue === '0') {
        throw new Error('function only accepts value in rem and not 0, e.g. 1.5rem');
    }
    else {
        return `${parseFloat(`${fontSizeValue}`) * REM_BASE}px`;
    }
};
const calculateLineHeight = (fontSize) => {
    var _a;
    const [, fontSizeValue, fontSizeUnit] = (_a = fontSize === null || fontSize === void 0 ? void 0 : fontSize.match(FONT_SIZE_REGEX)) !== null && _a !== void 0 ? _a : [];
    if (fontSizeUnit === undefined || fontSizeValue === undefined || fontSizeValue === '0') {
        throw new Error(`font size needs to be value + px or rem and not 0, e.g. 15rem or 16px, received: '${fontSize}'`);
    }
    const fontSizePx = fontSizeUnit === 'rem' ? remToPx(fontSize) : fontSizeValue;
    const fontSizeLength = parseFloat(fontSizePx);
    const e = 2.71828;
    const exactLineHeightFactor = 0.911 / (2.97 + 0.005 * Math.pow(e, 0.2 * fontSizeLength)) + 1.2;
    const exactLineHeightPx = fontSizeLength * exactLineHeightFactor;
    let remainingPx = exactLineHeightPx % 4;
    if (remainingPx > 2) {
        remainingPx = remainingPx - 4;
    }
    const roundingFactor = 100000;
    const fittedLineHeightPx = exactLineHeightPx - remainingPx;
    const fittedLineHeightFactor = fittedLineHeightPx / fontSizeLength;
    return Math.round(fittedLineHeightFactor * roundingFactor) / roundingFactor;
};

const calcLineHeightForElement = (tag) => {
    const { fontSize } = window.getComputedStyle(tag);
    // fontSize is "" when element does no longer exist and would throw an exception in calculateLineHeight
    return fontSize && calculateLineHeight(fontSize);
};

export { calcLineHeightForElement as c };
