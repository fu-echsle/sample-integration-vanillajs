'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const breakpointCustomizable = require('./breakpointCustomizable-171403bf.js');
const index = require('./index-61836d02.js');

const textListCss = ":host{display:block;counter-reset:section !important}.p-text-list{font-size:1rem;line-height:1.5;font-family:\"Porsche Next\", \"Arial Narrow\", Arial, sans-serif;font-weight:400;display:block;padding:0;margin:0}.p-text-list--theme-light{color:#000}.p-text-list--theme-dark{color:#fff}";

class TextList {
    constructor(hostRef) {
        breakpointCustomizable.registerInstance(this, hostRef);
        /** The type of the text list. */
        this.listType = 'unordered';
        /** The list style type of an ordered list. */
        this.orderType = 'numbered';
        /** Adapts the text color depending on the theme. Has no effect when "inherit" is set as color prop. */
        this.theme = 'light';
    }
    render() {
        const TagType = this.listType === 'unordered' ? 'ul' : 'ol';
        const textListClasses = index.classnames(breakpointCustomizable.prefix('text-list'), breakpointCustomizable.prefix(`text-list--${this.listType}`), breakpointCustomizable.prefix(`text-list--theme-${this.theme}`), this.isNestedList && breakpointCustomizable.prefix('text-list--nested'));
        return (breakpointCustomizable.h(breakpointCustomizable.Host, { nested: this.isNestedList }, breakpointCustomizable.h(TagType, { role: 'list', class: textListClasses }, breakpointCustomizable.h("slot", null))));
    }
    get isNestedList() {
        return !!this.host.closest(breakpointCustomizable.prefix('text-list-item'));
    }
    get host() { return breakpointCustomizable.getElement(this); }
}
TextList.style = textListCss;

exports.p_text_list = TextList;
