'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-b721d08d.js');
const index$1 = require('./index-66ba56ab.js');

const selectWrapperCss = ":host{display:block}::slotted(select){position:absolute !important;top:0 !important;left:0 !important;width:100% !important;height:100% !important;display:block !important;padding:0.75rem 3rem 0.75rem 0.75rem !important;margin:0 !important;outline:transparent none !important;outline-offset:1px !important;-webkit-appearance:none !important;-moz-appearance:none !important;appearance:none !important;-webkit-box-sizing:border-box !important;box-sizing:border-box !important;border-width:0 !important;border-top-color:transparent !important;background-color:transparent !important;opacity:1 !important;font-family:\"Porsche Next\", \"Arial Narrow\", Arial, sans-serif !important;font-weight:400 !important;font-size:1rem !important;line-height:1.5 !important;color:#000 !important;text-indent:0 !important;cursor:pointer !important;-webkit-transition:outline-color 0.24s ease, color 0.24s ease, border-top-color 1ms linear !important;transition:outline-color 0.24s ease, color 0.24s ease, border-top-color 1ms linear !important}::slotted(select:-moz-focusring){color:transparent !important;text-shadow:0 0 0 #000 !important}::slotted(select::-ms-expand){display:none !important}::slotted(select:focus::-ms-value){background-color:transparent !important;color:#000 !important}::slotted(select:focus){outline:#00d5b9 solid 2px !important}::slotted(select:disabled){border-top-color:rgba(255, 255, 255, 0.01) !important;color:#96989a !important;cursor:not-allowed !important}.p-select-wrapper__label{display:block;position:relative}.p-select-wrapper__label-text,.p-select-wrapper__description-text{display:block;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;color:#000;-webkit-transition:color 0.24s ease;transition:color 0.24s ease}.p-select-wrapper__label-text--disabled,.p-select-wrapper__description-text--disabled{color:#96989a}.p-select-wrapper__label-text--visible,.p-select-wrapper__description-text--visible{position:static;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;height:auto;margin:0;padding:0 0 0.25rem 0;white-space:normal;overflow:visible;clip:auto;-webkit-clip-path:none;clip-path:none}.p-select-wrapper__label-text--hidden,.p-select-wrapper__description-text--hidden{position:absolute;width:1px;height:1px;margin:-1px;padding:0;white-space:nowrap;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);-webkit-clip-path:inset(50%);clip-path:inset(50%)}@media (min-width: 480px){.p-select-wrapper__label-text--visible-xs,.p-select-wrapper__description-text--visible-xs{position:static;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;height:auto;margin:0;padding:0 0 0.25rem 0;white-space:normal;overflow:visible;clip:auto;-webkit-clip-path:none;clip-path:none}.p-select-wrapper__label-text--hidden-xs,.p-select-wrapper__description-text--hidden-xs{position:absolute;width:1px;height:1px;margin:-1px;padding:0;white-space:nowrap;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);-webkit-clip-path:inset(50%);clip-path:inset(50%)}}@media (min-width: 760px){.p-select-wrapper__label-text--visible-s,.p-select-wrapper__description-text--visible-s{position:static;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;height:auto;margin:0;padding:0 0 0.25rem 0;white-space:normal;overflow:visible;clip:auto;-webkit-clip-path:none;clip-path:none}.p-select-wrapper__label-text--hidden-s,.p-select-wrapper__description-text--hidden-s{position:absolute;width:1px;height:1px;margin:-1px;padding:0;white-space:nowrap;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);-webkit-clip-path:inset(50%);clip-path:inset(50%)}}@media (min-width: 1000px){.p-select-wrapper__label-text--visible-m,.p-select-wrapper__description-text--visible-m{position:static;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;height:auto;margin:0;padding:0 0 0.25rem 0;white-space:normal;overflow:visible;clip:auto;-webkit-clip-path:none;clip-path:none}.p-select-wrapper__label-text--hidden-m,.p-select-wrapper__description-text--hidden-m{position:absolute;width:1px;height:1px;margin:-1px;padding:0;white-space:nowrap;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);-webkit-clip-path:inset(50%);clip-path:inset(50%)}}@media (min-width: 1300px){.p-select-wrapper__label-text--visible-l,.p-select-wrapper__description-text--visible-l{position:static;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;height:auto;margin:0;padding:0 0 0.25rem 0;white-space:normal;overflow:visible;clip:auto;-webkit-clip-path:none;clip-path:none}.p-select-wrapper__label-text--hidden-l,.p-select-wrapper__description-text--hidden-l{position:absolute;width:1px;height:1px;margin:-1px;padding:0;white-space:nowrap;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);-webkit-clip-path:inset(50%);clip-path:inset(50%)}}@media (min-width: 1760px){.p-select-wrapper__label-text--visible-xl,.p-select-wrapper__description-text--visible-xl{position:static;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;height:auto;margin:0;padding:0 0 0.25rem 0;white-space:normal;overflow:visible;clip:auto;-webkit-clip-path:none;clip-path:none}.p-select-wrapper__label-text--hidden-xl,.p-select-wrapper__description-text--hidden-xl{position:absolute;width:1px;height:1px;margin:-1px;padding:0;white-space:nowrap;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);-webkit-clip-path:inset(50%);clip-path:inset(50%)}}.p-select-wrapper__description-text{color:#626669}.p-select-wrapper__description-text--disabled{color:#96989a}.p-select-wrapper__label-text~.p-select-wrapper__description-text{margin-top:-0.25rem;padding-bottom:0.5rem}.p-select-wrapper__fake-select{position:relative;width:100%;height:3rem;display:block;background-color:#fff;-webkit-box-shadow:inset 0 0 0 1px #626669;box-shadow:inset 0 0 0 1px #626669;-webkit-transition:background-color 0.24s ease, -webkit-box-shadow 0.24s ease;transition:background-color 0.24s ease, -webkit-box-shadow 0.24s ease;transition:box-shadow 0.24s ease, background-color 0.24s ease;transition:box-shadow 0.24s ease, background-color 0.24s ease, -webkit-box-shadow 0.24s ease}.p-select-wrapper__fake-select:hover:not(.p-select-wrapper__fake-select--disabled):not(.p-select-wrapper__fake-select--success):not(.p-select-wrapper__fake-select--error),.p-select-wrapper__label-text:hover~.p-select-wrapper__fake-select:not(.p-select-wrapper__fake-select--disabled):not(.p-select-wrapper__fake-select--success):not(.p-select-wrapper__fake-select--error){-webkit-box-shadow:inset 0 0 0 1px #000;box-shadow:inset 0 0 0 1px #000}.p-select-wrapper__fake-select--disabled{-webkit-box-shadow:inset 0 0 0 1px #96989a;box-shadow:inset 0 0 0 1px #96989a;background-color:#fff}.p-select-wrapper__fake-select--success{-webkit-box-shadow:inset 0 0 0 2px #018a16;box-shadow:inset 0 0 0 2px #018a16}.p-select-wrapper__fake-select--success:hover,.p-select-wrapper__label-text:hover~.p-select-wrapper__fake-select--success{-webkit-box-shadow:inset 0 0 0 2px #014d0c;box-shadow:inset 0 0 0 2px #014d0c}.p-select-wrapper__fake-select--error{-webkit-box-shadow:inset 0 0 0 2px #e00000;box-shadow:inset 0 0 0 2px #e00000}.p-select-wrapper__fake-select--error:hover,.p-select-wrapper__label-text:hover~.p-select-wrapper__fake-select--error{-webkit-box-shadow:inset 0 0 0 2px #a30000;box-shadow:inset 0 0 0 2px #a30000}.p-select-wrapper__fake-option-list{font-size:1rem;line-height:1.5;font-family:\"Porsche Next\", \"Arial Narrow\", Arial, sans-serif;font-weight:400;position:absolute;z-index:1;border:1px solid #626669;border-top-color:#c9cacb;left:0;right:0;top:calc(100% - 1px);max-height:200px;overflow-y:auto;background-color:#fff;scroll-behavior:smooth;scrollbar-width:thin;scrollbar-color:auto}.p-select-wrapper__fake-option-list::-webkit-scrollbar{-webkit-appearance:none;width:6px}.p-select-wrapper__fake-option-list::-webkit-scrollbar-thumb{border-radius:4px;background-color:rgba(0, 0, 0, 0.4)}.p-select-wrapper__fake-option-list::after{content:\"\";display:block;height:0.25rem}.p-select-wrapper__fake-option-list:focus{outline:none}.p-select-wrapper__fake-option-list--hidden{display:block;opacity:0;overflow:hidden;height:1px}.p-select-wrapper__fake-option{position:relative;display:block;padding:0.5rem 0.75rem;cursor:pointer;color:#000;-webkit-transition:color 0.24s ease, background-color 0.24s ease;transition:color 0.24s ease, background-color 0.24s ease}.p-select-wrapper__fake-option:not([aria-disabled]):hover{color:#d5001c}.p-select-wrapper__fake-option:focus{outline:#00d5b9 solid 2px}.p-select-wrapper__fake-option--selected{color:#d5001c;cursor:default;pointer-events:none;padding-right:2rem}.p-select-wrapper__fake-option--highlighted:not(.p-select-wrapper__fake-option--selected){color:#d5001c;background-color:#ebebeb}.p-select-wrapper__fake-option--disabled{color:#96989a;cursor:not-allowed}.p-select-wrapper__fake-option-icon{position:absolute;right:0.75rem}.p-select-wrapper__fake-optgroup-label{display:block;padding:0.5rem 0.75rem;margin-top:0.5rem;font-weight:700}.p-select-wrapper__fake-optgroup-label~.p-select-wrapper__fake-option{padding-left:1.5rem}.p-select-wrapper__icon{position:absolute;top:0.75rem;right:0.75rem;color:#000;-webkit-transition:-webkit-transform 0.24s ease;transition:-webkit-transform 0.24s ease;transition:transform 0.24s ease;transition:transform 0.24s ease, -webkit-transform 0.24s ease}.p-select-wrapper__icon--disabled{color:#96989a}.p-select-wrapper__icon--opened{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.p-select-wrapper__message{margin-top:0.25rem;color:#000;-webkit-transition:color 0.24s ease;transition:color 0.24s ease}.p-select-wrapper__message--success{color:#018a16}.p-select-wrapper__message--error{color:#e00000}";

const SelectWrapper = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /** The label text. */
        this.label = '';
        /** The description text. */
        this.description = '';
        /** The validation state. */
        this.state = 'none';
        /** The message styled depending on validation state. */
        this.message = '';
        /** Show or hide label. For better accessibility it is recommended to show the label. */
        this.hideLabel = false;
        this.fakeOptionListHidden = true;
        this.optionDisabled = [];
        this.isTouch = index.isTouchDevice();
    }
    componentWillLoad() {
        this.initSelect();
        this.setAriaAttributes();
        this.setState();
        this.bindStateListener();
        this.addSlottedStyles();
        if (!this.isTouch) {
            this.observeSelect();
            this.setOptionList();
            this.select.addEventListener('mousedown', this.handleMouseEvents.bind(this));
            this.select.addEventListener('keydown', this.handleKeyboardEvents.bind(this));
            this.optionHighlighted = this.optionSelected;
            if (typeof document !== 'undefined') {
                document.addEventListener('mousedown', this.handleClickOutside.bind(this), false);
            }
        }
    }
    componentDidUpdate() {
        this.setAriaAttributes();
    }
    componentDidUnload() {
        this.selectObserver.disconnect();
        this.select.removeEventListener('mousedown', this.handleMouseEvents.bind(this));
        this.select.removeEventListener('keydown', this.handleKeyboardEvents.bind(this));
        if (!this.isTouch && typeof document !== 'undefined') {
            document.removeEventListener('mousedown', this.handleClickOutside.bind(this), false);
        }
    }
    render() {
        const labelClasses = index$1.cx(index.prefix('select-wrapper__label'));
        const labelTextClasses = index$1.cx(index.prefix('select-wrapper__label-text'), index.mapBreakpointPropToPrefixedClasses('select-wrapper__label-text-', this.hideLabel, ['hidden', 'visible']), { [index.prefix('select-wrapper__label-text--disabled')]: this.disabled });
        const descriptionTextClasses = index$1.cx(index.prefix('select-wrapper__description-text'), index.mapBreakpointPropToPrefixedClasses('select-wrapper__description-text-', this.hideLabel, ['hidden', 'visible']), { [index.prefix('select-wrapper__description-text--disabled')]: this.disabled });
        const fakeSelectClasses = index$1.cx(index.prefix('select-wrapper__fake-select'), { [index.prefix('select-wrapper__fake-select--disabled')]: this.disabled }, { [index.prefix(`select-wrapper__fake-select--${this.state}`)]: this.state !== 'none' });
        const fakeOptionListClasses = index$1.cx(index.prefix('select-wrapper__fake-option-list'), { [index.prefix('select-wrapper__fake-option-list--hidden')]: this.fakeOptionListHidden });
        const iconClasses = index$1.cx(index.prefix('select-wrapper__icon'), { [index.prefix('select-wrapper__icon--disabled')]: this.disabled }, { [index.prefix('select-wrapper__icon--opened')]: !this.fakeOptionListHidden });
        const messageClasses = index$1.cx(index.prefix('select-wrapper__message'), { [index.prefix(`select-wrapper__message--${this.state}`)]: this.state !== 'none' });
        return (index.h(index.Host, null, index.h("div", { class: labelClasses }, index.h("label", null, this.isLabelVisible &&
            index.h("p-text", { class: labelTextClasses, tag: 'span', color: 'inherit', onClick: () => this.labelClick() }, this.label || index.h("span", null, index.h("slot", { name: 'label' }))), this.isDescriptionVisible &&
            index.h("p-text", { class: descriptionTextClasses, tag: 'span', color: 'inherit', size: 'x-small', onClick: () => this.labelClick() }, this.description || index.h("span", null, index.h("slot", { name: 'description' }))), index.h("span", { class: fakeSelectClasses }, index.h("p-icon", { class: iconClasses, name: 'arrow-head-down', color: 'inherit' }), index.h("slot", null))), !this.isTouch &&
            index.h("div", { class: fakeOptionListClasses, role: 'listbox', "aria-activedescendant": `option-${this.optionSelected}`, tabIndex: -1, "aria-expanded": this.fakeOptionListHidden ? 'false' : 'true', "aria-labelledby": this.label, ref: el => this.fakeOptionListNode = el }, this.createFakeOptionList())), this.isMessageVisible &&
            index.h("p-text", { class: messageClasses, color: 'inherit', role: this.state === 'error' && 'alert' }, this.message || index.h("span", null, index.h("slot", { name: 'message' })))));
    }
    get isLabelVisible() {
        return !!this.label || !!this.host.querySelector('[slot="label"]');
    }
    get isDescriptionVisible() {
        return !!this.description || !!this.host.querySelector('[slot="description"]');
    }
    get isMessageDefined() {
        return !!this.message || !!this.host.querySelector('[slot="message"]');
    }
    get isMessageVisible() {
        return ['success', 'error'].includes(this.state) && this.isMessageDefined;
    }
    /*
     * <START NATIVE SELECT>
     */
    initSelect() {
        this.select = this.host.querySelector('select');
    }
    /*
     * This is a workaround to improve accessibility because the select and the label/description/message text are placed in different DOM.
     * Referencing ID's from outside the component is impossible because the web component’s DOM is separate.
     * We have to wait for full support of the Accessibility Object Model (AOM) to provide the relationship between shadow DOM and slots.
     */
    setAriaAttributes() {
        if (this.label && this.message) {
            this.select.setAttribute('aria-label', `${this.label}. ${this.message}`);
        }
        else if (this.label && this.description) {
            this.select.setAttribute('aria-label', `${this.label}. ${this.description}`);
        }
        else if (this.label) {
            this.select.setAttribute('aria-label', this.label);
        }
        if (this.state === 'error') {
            this.select.setAttribute('aria-invalid', 'true');
        }
        else {
            this.select.removeAttribute('aria-invalid');
        }
    }
    setState() {
        this.disabled = this.select.disabled;
    }
    labelClick() {
        this.select.focus();
    }
    bindStateListener() {
        index.transitionListener(this.select, 'border-top-color', () => {
            this.setState();
        });
    }
    /*
     * <START CUSTOM SELECT DROPDOWN>
     */
    observeSelect() {
        this.selectObserver = new MutationObserver((mutations) => {
            mutations.filter(mutation => mutation.type === 'childList').forEach(() => {
                this.setOptionList();
            });
            mutations.filter(mutation => mutation.type === 'attributes').forEach(() => {
                this.setOptionsDisabled();
            });
        });
        const config = { childList: true, subtree: true, attributes: true, attributeFilter: ['disabled'] };
        this.selectObserver.observe(this.select, config);
    }
    handleClickOutside(e) {
        if (this.host.contains(e.target)) {
            return;
        }
        this.fakeOptionListHidden = true;
    }
    handleMouseEvents(e) {
        e.preventDefault();
        this.select.focus();
        this.fakeOptionListHidden = this.fakeOptionListHidden === false;
    }
    handleKeyboardEvents(e) {
        const key = e.key;
        switch (key) {
            case 'ArrowUp':
            case 'Up':
                e.preventDefault();
                this.fakeOptionListHidden = false;
                this.cycleFakeOptionList('up');
                break;
            case 'ArrowDown':
            case 'Down':
                e.preventDefault();
                this.fakeOptionListHidden = false;
                this.cycleFakeOptionList('down');
                break;
            case 'ArrowLeft':
            case 'Left':
                e.preventDefault();
                this.cycleFakeOptionList('left');
                break;
            case 'ArrowRight':
            case 'Right':
                e.preventDefault();
                this.cycleFakeOptionList('right');
                break;
            case ' ':
            case 'Spacebar':
                e.preventDefault();
                this.fakeOptionListHidden = this.fakeOptionListHidden === false;
                if (this.fakeOptionListHidden) {
                    this.setOptionSelected(this.optionHighlighted);
                }
                break;
            case 'Enter':
                e.preventDefault();
                this.fakeOptionListHidden = true;
                this.setOptionSelected(this.optionHighlighted);
                break;
            case 'Escape':
            case 'Esc':
                this.fakeOptionListHidden = true;
                this.optionHighlighted = this.optionSelected;
                break;
            case 'PageUp':
                e.preventDefault();
                if (!this.fakeOptionListHidden) {
                    this.optionHighlighted = 0;
                    this.handleScroll();
                }
                break;
            case 'PageDown':
                e.preventDefault();
                if (!this.fakeOptionListHidden) {
                    this.optionHighlighted = this.options.length - 1;
                    this.handleScroll();
                }
                break;
            case 'Tab':
                if (!this.fakeOptionListHidden) {
                    this.fakeOptionListHidden = true;
                }
                break;
            default:
                this.searchOptions();
        }
    }
    setOptionList() {
        this.options = this.select.querySelectorAll('option');
        this.optgroups = this.select.querySelectorAll('optgroup');
        this.optionSelected = this.select.selectedIndex;
        this.setOptionsDisabled();
    }
    setOptionsDisabled() {
        this.optionDisabled.length = 0;
        this.options.forEach((item, key) => {
            if (item.hasAttribute('disabled')) {
                this.optionDisabled = [...this.optionDisabled, key];
            }
        });
    }
    setOptionSelected(key) {
        this.select.selectedIndex = key;
        this.optionSelected = key;
        this.optionHighlighted = key;
        this.fakeOptionListHidden = true;
        this.select.focus();
    }
    createFakeOptionList() {
        return Array.from(this.options).map((option, key) => [
            (this.optgroups.length > 0 && option === option.parentNode.firstChild) &&
                index.h("span", { class: index$1.cx(index.prefix('select-wrapper__fake-optgroup-label')), role: 'presentation' }, option.closest('optgroup').label),
            index.h("div", { id: `option-${key}`, role: 'option', color: 'inherit', class: index$1.cx(index.prefix('select-wrapper__fake-option'), {
                    [index.prefix('select-wrapper__fake-option--selected')]: this.optionSelected === key,
                    [index.prefix('select-wrapper__fake-option--highlighted')]: this.optionHighlighted === key,
                    [index.prefix('select-wrapper__fake-option--disabled')]: this.optionDisabled.includes(key)
                }), onClick: () => !this.optionDisabled.includes(key) ? this.setOptionSelected(key) : this.select.focus(), "aria-selected": this.optionSelected === key && 'true', "aria-disabled": this.optionDisabled.includes(key) && 'true' }, index.h("span", null, option.text), key === this.optionSelected &&
                index.h("p-icon", { class: index$1.cx(index.prefix('select-wrapper__fake-option-icon')), "aria-hidden": 'true', name: 'check', color: 'inherit' }))
        ]);
    }
    cycleFakeOptionList(direction) {
        const numberOfOptions = this.options.length;
        if (direction === 'down' || direction === 'right') {
            this.optionHighlighted++;
            if (this.optionHighlighted > numberOfOptions - 1 && this.optionDisabled.includes(0)) {
                this.optionHighlighted = 1;
            }
            else if ((this.optionDisabled.includes(this.optionHighlighted) && this.optionDisabled.includes(numberOfOptions - 1)) || this.optionHighlighted > numberOfOptions - 1) {
                this.optionHighlighted = 0;
            }
            else if (this.optionDisabled.includes(this.optionHighlighted)) {
                this.optionHighlighted += 1;
            }
        }
        else if (direction === 'up' || direction === 'left') {
            this.optionHighlighted--;
            if (this.optionHighlighted < 0 && this.optionDisabled.includes(numberOfOptions - 1)) {
                this.optionHighlighted = numberOfOptions - 2;
            }
            else if ((this.optionDisabled.includes(this.optionHighlighted) && this.optionDisabled.includes(0)) || this.optionHighlighted < 0) {
                this.optionHighlighted = numberOfOptions - 1;
            }
            else if (this.optionDisabled.includes(this.optionHighlighted)) {
                this.optionHighlighted -= 1;
            }
        }
        if (direction === 'left' || direction === 'right') {
            this.setOptionSelected(this.optionHighlighted);
        }
        this.handleScroll();
    }
    handleScroll() {
        const fakeOptionListNodeHeight = 200;
        if (this.fakeOptionListNode.scrollHeight > fakeOptionListNodeHeight) {
            this.fakeOptionHighlightedNode = this.fakeOptionListNode.querySelectorAll('div')[this.optionHighlighted];
            const scrollBottom = fakeOptionListNodeHeight + this.fakeOptionListNode.scrollTop;
            const elementBottom = this.fakeOptionHighlightedNode.offsetTop + this.fakeOptionHighlightedNode.offsetHeight;
            if (elementBottom > scrollBottom) {
                this.fakeOptionListNode.scrollTop = elementBottom - fakeOptionListNodeHeight;
            }
            else if (this.fakeOptionHighlightedNode.offsetTop < this.fakeOptionListNode.scrollTop) {
                this.fakeOptionListNode.scrollTop = this.fakeOptionHighlightedNode.offsetTop;
            }
        }
    }
    searchOptions() {
        // timeout is needed if fast keyboard events are triggered and dom needs time to update state
        setTimeout(() => {
            const selected = this.select.selectedIndex;
            this.optionSelected = selected;
            this.optionHighlighted = selected;
            this.handleScroll();
        }, 100);
    }
    addSlottedStyles() {
        const tagName = this.host.tagName.toLowerCase();
        const style = `${tagName} a {
      outline: none transparent;
      color: inherit;
      text-decoration: underline;
      -webkit-transition: outline-color .24s ease, color .24s ease;
      transition: outline-color .24s ease, color .24s ease;
    }
    ${tagName} a:hover {
      color: #d5001c;
    }
    ${tagName} a:focus {
      outline: 2px solid #00d5b9;
      outline-offset: 1px;
    }`;
        index.insertSlottedStyles(this.host, style);
    }
    get host() { return index.getElement(this); }
};
SelectWrapper.style = selectWrapperCss;

exports.p_select_wrapper = SelectWrapper;
