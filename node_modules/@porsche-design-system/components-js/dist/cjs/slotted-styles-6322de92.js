'use strict';

const elementStyles = new Map();
const getElementMap = (element) => {
    const tagName = element.tagName;
    const map = elementStyles.get(tagName);
    if (map !== undefined) {
        return map;
    }
    const newMap = new Map();
    elementStyles.set(tagName, newMap);
    return newMap;
};
const getNodeToPrependTo = (rootNode) => {
    if (rootNode === document) {
        return rootNode.head;
    }
    return rootNode;
};
/**
 * Adds an inheritable style for slotted content.
 * @param element
 * @param css - Make sure that css selectors are always in context of element (make sure that
 * it's created dynamically by e.g. `element.tagName.toLowerCase()`), e.g. `a:focus p-link-pure {…}`. Something like
 * providing only `a {…}` would cause unscoped global styling.
 * @returns void
 */
const insertSlottedStyles = (element, css) => {
    const rootNode = element.getRootNode();
    const elementMap = getElementMap(element);
    if (elementMap.get(rootNode) === undefined) {
        elementMap.set(rootNode, true);
        const style = document.createElement('style');
        style.appendChild(document.createTextNode(minifySlottedStyles(css)));
        const prependTo = getNodeToPrependTo(rootNode);
        const charsetTag = prependTo.querySelector('meta[charset]');
        if (charsetTag !== null) {
            prependTo.insertBefore(style, charsetTag.nextSibling);
        }
        else if (prependTo.childNodes.length > 0) {
            prependTo.insertBefore(style, prependTo.firstChild);
        }
        else {
            prependTo.appendChild(style);
        }
    }
};
const minifySlottedStyles = (css) => css
    .replace(/\s{2,}|(\/\*.*\*\/)/g, '') // remove 2 and more white spaces + comments
    .replace(/(:|;)\s/g, '$1') // remove space after colon and semi colon
    .replace(/[\s;]({|})\s?/g, '$1'); // remove semi colon and space before and after opening and closing curly bracket

exports.insertSlottedStyles = insertSlottedStyles;
