'use strict';

require('./breakpointCustomizable-171403bf.js');

const initBlurOnFocus = () => {
    if (typeof document === 'undefined') {
        return;
    }
    document.addEventListener('click', () => {
        const element = document.activeElement;
        /**
         * this additional condition is an ie11 workaround
         * when the active element get's removed before
         * the listener is called, the activeElement on ie11
         * will be null. (other browsers will always have an
         * active element, body as fallback)
         * you can test it with:
         * document.activeElement.removeNode();
         * console.log(document.activeElement);
         */
        if (element) {
            const optOutElement = element.closest('.p-re-enable-focus-on-click');
            const isExcluded = ['SELECT', 'INPUT', 'TEXTAREA'].includes(element.tagName);
            if (optOutElement === null && !isExcluded) {
                element.blur();
            }
        }
    });
};

/* Auto Generated Below */
const FONT_FACE_STYLE_CDN_URL = "https://cdn.ui.porsche.com/porsche-design-system/style/font-face.min.677d41d9905a04aadcb253f71e5f71e9.css";

const injectGlobalStyle = () => {
    if (typeof document === 'undefined') {
        return;
    }
    const link = document.createElement('link');
    link.href =
         FONT_FACE_STYLE_CDN_URL
            ;
    link.type = 'text/css';
    link.rel = 'stylesheet';
    document.getElementsByTagName('head')[0].appendChild(link);
};

const version = "1.5.1";

const TRACKING_URL = 'https://aws.designsystem.porsche.com/porsche-design-system.png';
const trackEvent = (component, event) => {
    {
        fetch(`${TRACKING_URL}?${queryString(Object.assign({ v: version, t: new Date().getTime(), c: component }, (event && { e: event })))}`).catch(console.warn);
    }
};
const trackLoader = () => trackEvent('loader', 'init');
const queryString = (params) => Object.entries(params)
    .map(([key, value]) => value instanceof Array
    ? value.map((val) => `${encodeURI(key)}=${encodeURI(val)}`).join('&')
    : `${encodeURI(key)}=${encodeURI(value)}`)
    .join('&');
const encodeURI = (value) => encodeURIComponent(`${value}`);

const appGlobalScript = () => {
    trackLoader();
    injectGlobalStyle();
    initBlurOnFocus();
};

const globalScripts = appGlobalScript;

exports.globalScripts = globalScripts;
