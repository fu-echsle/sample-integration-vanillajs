import { Host, Component, Prop, h, Element, State } from '@stencil/core';
import cx from 'classnames';
import { mapBreakpointPropToPrefixedClasses, prefix, transitionListener, insertSlottedStyles, isTouchDevice } from '../../../utils';
export class SelectWrapper {
    constructor() {
        /** The label text. */
        this.label = '';
        /** The description text. */
        this.description = '';
        /** The validation state. */
        this.state = 'none';
        /** The message styled depending on validation state. */
        this.message = '';
        /** Show or hide label. For better accessibility it is recommended to show the label. */
        this.hideLabel = false;
        this.fakeOptionListHidden = true;
        this.optionDisabled = [];
        this.isTouch = isTouchDevice();
        this.setState = () => {
            this.disabled = this.select.disabled;
        };
        this.labelClick = () => {
            this.select.focus();
        };
        this.setOptionList = () => {
            this.options = this.select.querySelectorAll('option');
            this.optgroups = this.select.querySelectorAll('optgroup');
            this.optionSelected = this.select.selectedIndex;
            this.setOptionsDisabled();
        };
        this.setOptionsDisabled = () => {
            this.optionDisabled.length = 0;
            this.options.forEach((item, key) => {
                if (item.hasAttribute('disabled')) {
                    this.optionDisabled = [...this.optionDisabled, key];
                }
            });
        };
        this.setOptionSelected = (key) => {
            this.select.selectedIndex = key;
            this.optionSelected = key;
            this.optionHighlighted = key;
            this.fakeOptionListHidden = true;
            // IE11 workaround for dispatchEvent
            let event;
            if (typeof Event === 'function') {
                event = new Event('change', { bubbles: true });
            }
            else {
                event = document.createEvent('Event');
                event.initEvent('change', true, false);
            }
            this.select.dispatchEvent(event);
            this.select.focus();
        };
    }
    componentWillLoad() {
        this.initSelect();
        this.setAriaAttributes();
        this.setState();
        this.bindStateListener();
        this.addSlottedStyles();
        if (!this.isTouch) {
            this.observeSelect();
            this.setOptionList();
            this.select.addEventListener('mousedown', this.handleMouseEvents.bind(this));
            this.select.addEventListener('keydown', this.handleKeyboardEvents.bind(this));
            this.optionHighlighted = this.optionSelected;
            if (typeof document !== 'undefined') {
                document.addEventListener('mousedown', this.handleClickOutside.bind(this), false);
            }
        }
    }
    componentDidUpdate() {
        this.setAriaAttributes();
    }
    componentDidUnload() {
        this.selectObserver.disconnect();
        this.select.removeEventListener('mousedown', this.handleMouseEvents.bind(this));
        this.select.removeEventListener('keydown', this.handleKeyboardEvents.bind(this));
        if (!this.isTouch && typeof document !== 'undefined') {
            document.removeEventListener('mousedown', this.handleClickOutside.bind(this), false);
        }
    }
    render() {
        const labelClasses = cx(prefix('select-wrapper__label'));
        const labelTextClasses = cx(prefix('select-wrapper__label-text'), mapBreakpointPropToPrefixedClasses('select-wrapper__label-text-', this.hideLabel, ['hidden', 'visible']), { [prefix('select-wrapper__label-text--disabled')]: this.disabled });
        const descriptionTextClasses = cx(prefix('select-wrapper__description-text'), mapBreakpointPropToPrefixedClasses('select-wrapper__description-text-', this.hideLabel, ['hidden', 'visible']), { [prefix('select-wrapper__description-text--disabled')]: this.disabled });
        const fakeSelectClasses = cx(prefix('select-wrapper__fake-select'), { [prefix('select-wrapper__fake-select--disabled')]: this.disabled }, { [prefix(`select-wrapper__fake-select--${this.state}`)]: this.state !== 'none' });
        const fakeOptionListClasses = cx(prefix('select-wrapper__fake-option-list'), {
            [prefix('select-wrapper__fake-option-list--hidden')]: this.fakeOptionListHidden
        });
        const iconClasses = cx(prefix('select-wrapper__icon'), { [prefix('select-wrapper__icon--disabled')]: this.disabled }, { [prefix('select-wrapper__icon--opened')]: !this.fakeOptionListHidden });
        const messageClasses = cx(prefix('select-wrapper__message'), {
            [prefix(`select-wrapper__message--${this.state}`)]: this.state !== 'none'
        });
        return (h(Host, null,
            h("div", { class: labelClasses },
                h("label", null,
                    this.isLabelVisible && (h("p-text", { class: labelTextClasses, tag: "span", color: "inherit", onClick: this.labelClick }, this.label || (h("span", null,
                        h("slot", { name: "label" }))))),
                    this.isDescriptionVisible && (h("p-text", { class: descriptionTextClasses, tag: "span", color: "inherit", size: "x-small", onClick: this.labelClick }, this.description || (h("span", null,
                        h("slot", { name: "description" }))))),
                    h("span", { class: fakeSelectClasses },
                        h("p-icon", { class: iconClasses, name: "arrow-head-down", color: "inherit" }),
                        h("slot", null))),
                !this.isTouch && (h("div", { class: fakeOptionListClasses, role: "listbox", "aria-activedescendant": `option-${this.optionSelected}`, tabIndex: -1, "aria-expanded": this.fakeOptionListHidden ? 'false' : 'true', "aria-labelledby": this.label, ref: (el) => (this.fakeOptionListNode = el) }, this.createFakeOptionList()))),
            this.isMessageVisible && (h("p-text", { class: messageClasses, color: "inherit", role: this.state === 'error' && 'alert' }, this.message || (h("span", null,
                h("slot", { name: "message" })))))));
    }
    get isLabelVisible() {
        return !!this.label || !!this.host.querySelector('[slot="label"]');
    }
    get isDescriptionVisible() {
        return !!this.description || !!this.host.querySelector('[slot="description"]');
    }
    get isMessageDefined() {
        return !!this.message || !!this.host.querySelector('[slot="message"]');
    }
    get isMessageVisible() {
        return ['success', 'error'].includes(this.state) && this.isMessageDefined;
    }
    /*
     * <START NATIVE SELECT>
     */
    initSelect() {
        this.select = this.host.querySelector('select');
    }
    /*
     * This is a workaround to improve accessibility because the select and the label/description/message text are placed in different DOM.
     * Referencing ID's from outside the component is impossible because the web componentâ€™s DOM is separate.
     * We have to wait for full support of the Accessibility Object Model (AOM) to provide the relationship between shadow DOM and slots.
     */
    setAriaAttributes() {
        if (this.label && this.message) {
            this.select.setAttribute('aria-label', `${this.label}. ${this.message}`);
        }
        else if (this.label && this.description) {
            this.select.setAttribute('aria-label', `${this.label}. ${this.description}`);
        }
        else if (this.label) {
            this.select.setAttribute('aria-label', this.label);
        }
        if (this.state === 'error') {
            this.select.setAttribute('aria-invalid', 'true');
        }
        else {
            this.select.removeAttribute('aria-invalid');
        }
    }
    bindStateListener() {
        transitionListener(this.select, 'border-top-color', this.setState);
    }
    /*
     * <START CUSTOM SELECT DROPDOWN>
     */
    observeSelect() {
        this.selectObserver = new MutationObserver((mutations) => {
            mutations.filter((mutation) => mutation.type === 'childList').forEach(this.setOptionList);
            mutations.filter((mutation) => mutation.type === 'attributes').forEach(this.setOptionsDisabled);
        });
        const config = { childList: true, subtree: true, attributes: true, attributeFilter: ['disabled'] };
        this.selectObserver.observe(this.select, config);
    }
    handleClickOutside(e) {
        if (this.host.contains(e.target)) {
            return;
        }
        this.fakeOptionListHidden = true;
    }
    handleMouseEvents(e) {
        e.preventDefault();
        this.select.focus();
        this.fakeOptionListHidden = this.fakeOptionListHidden === false;
    }
    handleKeyboardEvents(e) {
        const key = e.key;
        switch (key) {
            case 'ArrowUp':
            case 'Up':
                e.preventDefault();
                this.fakeOptionListHidden = false;
                this.cycleFakeOptionList('up');
                break;
            case 'ArrowDown':
            case 'Down':
                e.preventDefault();
                this.fakeOptionListHidden = false;
                this.cycleFakeOptionList('down');
                break;
            case 'ArrowLeft':
            case 'Left':
                e.preventDefault();
                this.cycleFakeOptionList('left');
                break;
            case 'ArrowRight':
            case 'Right':
                e.preventDefault();
                this.cycleFakeOptionList('right');
                break;
            case ' ':
            case 'Spacebar':
                e.preventDefault();
                this.fakeOptionListHidden = this.fakeOptionListHidden === false;
                if (this.fakeOptionListHidden) {
                    this.setOptionSelected(this.optionHighlighted);
                }
                break;
            case 'Enter':
                e.preventDefault();
                this.fakeOptionListHidden = true;
                this.setOptionSelected(this.optionHighlighted);
                break;
            case 'Escape':
            case 'Esc':
                this.fakeOptionListHidden = true;
                this.optionHighlighted = this.optionSelected;
                break;
            case 'PageUp':
                e.preventDefault();
                if (!this.fakeOptionListHidden) {
                    this.optionHighlighted = 0;
                    this.handleScroll();
                }
                break;
            case 'PageDown':
                e.preventDefault();
                if (!this.fakeOptionListHidden) {
                    this.optionHighlighted = this.options.length - 1;
                    this.handleScroll();
                }
                break;
            case 'Tab':
                if (!this.fakeOptionListHidden) {
                    this.fakeOptionListHidden = true;
                }
                break;
            default:
                this.searchOptions();
        }
    }
    createFakeOptionList() {
        return Array.from(this.options).map((option, key) => [
            this.optgroups.length > 0 && option === option.parentNode.firstChild && (h("span", { class: cx(prefix('select-wrapper__fake-optgroup-label')), role: "presentation" }, option.closest('optgroup').label)),
            h("div", { id: `option-${key}`, role: "option", color: "inherit", class: cx(prefix('select-wrapper__fake-option'), {
                    [prefix('select-wrapper__fake-option--selected')]: this.optionSelected === key,
                    [prefix('select-wrapper__fake-option--highlighted')]: this.optionHighlighted === key,
                    [prefix('select-wrapper__fake-option--disabled')]: this.optionDisabled.includes(key)
                }), onClick: () => (!this.optionDisabled.includes(key) ? this.setOptionSelected(key) : this.select.focus()), "aria-selected": this.optionSelected === key && 'true', "aria-disabled": this.optionDisabled.includes(key) && 'true' },
                h("span", null, option.text),
                key === this.optionSelected && (h("p-icon", { class: cx(prefix('select-wrapper__fake-option-icon')), "aria-hidden": "true", name: "check", color: "inherit" })))
        ]);
    }
    cycleFakeOptionList(direction) {
        const numberOfOptions = this.options.length;
        if (direction === 'down' || direction === 'right') {
            this.optionHighlighted++;
            if (this.optionHighlighted > numberOfOptions - 1 && this.optionDisabled.includes(0)) {
                this.optionHighlighted = 1;
            }
            else if ((this.optionDisabled.includes(this.optionHighlighted) && this.optionDisabled.includes(numberOfOptions - 1)) ||
                this.optionHighlighted > numberOfOptions - 1) {
                this.optionHighlighted = 0;
            }
            else if (this.optionDisabled.includes(this.optionHighlighted)) {
                this.optionHighlighted += 1;
            }
        }
        else if (direction === 'up' || direction === 'left') {
            this.optionHighlighted--;
            if (this.optionHighlighted < 0 && this.optionDisabled.includes(numberOfOptions - 1)) {
                this.optionHighlighted = numberOfOptions - 2;
            }
            else if ((this.optionDisabled.includes(this.optionHighlighted) && this.optionDisabled.includes(0)) ||
                this.optionHighlighted < 0) {
                this.optionHighlighted = numberOfOptions - 1;
            }
            else if (this.optionDisabled.includes(this.optionHighlighted)) {
                this.optionHighlighted -= 1;
            }
        }
        if (direction === 'left' || direction === 'right') {
            this.setOptionSelected(this.optionHighlighted);
        }
        this.handleScroll();
    }
    handleScroll() {
        const fakeOptionListNodeHeight = 200;
        if (this.fakeOptionListNode.scrollHeight > fakeOptionListNodeHeight) {
            this.fakeOptionHighlightedNode = this.fakeOptionListNode.querySelectorAll('div')[this.optionHighlighted];
            const scrollBottom = fakeOptionListNodeHeight + this.fakeOptionListNode.scrollTop;
            const elementBottom = this.fakeOptionHighlightedNode.offsetTop + this.fakeOptionHighlightedNode.offsetHeight;
            if (elementBottom > scrollBottom) {
                this.fakeOptionListNode.scrollTop = elementBottom - fakeOptionListNodeHeight;
            }
            else if (this.fakeOptionHighlightedNode.offsetTop < this.fakeOptionListNode.scrollTop) {
                this.fakeOptionListNode.scrollTop = this.fakeOptionHighlightedNode.offsetTop;
            }
        }
    }
    searchOptions() {
        // timeout is needed if fast keyboard events are triggered and dom needs time to update state
        setTimeout(() => {
            const selected = this.select.selectedIndex;
            this.optionSelected = selected;
            this.optionHighlighted = selected;
            this.handleScroll();
        }, 100);
    }
    addSlottedStyles() {
        const tagName = this.host.tagName.toLowerCase();
        const style = `${tagName} a {
      outline: none transparent;
      color: inherit;
      text-decoration: underline;
      -webkit-transition: outline-color .24s ease, color .24s ease;
      transition: outline-color .24s ease, color .24s ease;
    }
    ${tagName} a:hover {
      color: #d5001c;
    }
    ${tagName} a:focus {
      outline: 2px solid #00d5b9;
      outline-offset: 1px;
    }`;
        insertSlottedStyles(this.host, style);
    }
    static get is() { return "p-select-wrapper"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["select-wrapper.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["select-wrapper.css"]
    }; }
    static get properties() { return {
        "label": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The label text."
            },
            "attribute": "label",
            "reflect": false,
            "defaultValue": "''"
        },
        "description": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The description text."
            },
            "attribute": "description",
            "reflect": false,
            "defaultValue": "''"
        },
        "state": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "FormState",
                "resolved": "\"error\" | \"none\" | \"success\"",
                "references": {
                    "FormState": {
                        "location": "import",
                        "path": "../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The validation state."
            },
            "attribute": "state",
            "reflect": false,
            "defaultValue": "'none'"
        },
        "message": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The message styled depending on validation state."
            },
            "attribute": "message",
            "reflect": false,
            "defaultValue": "''"
        },
        "hideLabel": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "BreakpointCustomizable<boolean>",
                "resolved": "BreakpointValues<boolean> | boolean | string",
                "references": {
                    "BreakpointCustomizable": {
                        "location": "import",
                        "path": "../../../utils"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Show or hide label. For better accessibility it is recommended to show the label."
            },
            "attribute": "hide-label",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get states() { return {
        "disabled": {},
        "fakeOptionListHidden": {},
        "optionSelected": {},
        "optionHighlighted": {},
        "optionDisabled": {},
        "isTouch": {}
    }; }
    static get elementRef() { return "host"; }
}
