import { Host, Component, Prop, h, Element, State } from '@stencil/core';
import cx from 'classnames';
import { mapBreakpointPropToPrefixedClasses, prefix, transitionListener, insertSlottedStyles } from '../../../utils';
export class CheckboxWrapper {
    constructor() {
        /** The label text. */
        this.label = '';
        /** The validation state. */
        this.state = 'none';
        /** The message styled depending on validation state. */
        this.message = '';
        /** Show or hide label. For better accessibility it's recommended to show the label. */
        this.hideLabel = false;
        this.labelClick = (event) => {
            var _a;
            /**
             * we only want to simulate the checkbox click by label click
             * for real shadow dom, else the native behaviour works out
             * of the box.
             * also we don't want to click to the input, if a link is
             * clicked.
             */
            if (((_a = this.host.shadowRoot) === null || _a === void 0 ? void 0 : _a.host) && event.target.closest('a') === null) {
                this.input.click();
            }
        };
        this.setState = () => {
            this.checked = this.input.checked;
            this.disabled = this.input.disabled;
            this.indeterminate = this.input.indeterminate;
        };
    }
    componentWillLoad() {
        this.setInput();
        this.setAriaAttributes();
        this.setState();
        this.bindStateListener();
        this.addSlottedStyles();
    }
    componentDidUpdate() {
        this.setAriaAttributes();
    }
    render() {
        const labelClasses = cx(prefix('checkbox-wrapper__label'));
        const fakeCheckboxClasses = cx(prefix('checkbox-wrapper__fake-checkbox'), (this.checked || this.indeterminate) && prefix('checkbox-wrapper__fake-checkbox--checked'), this.disabled && prefix('checkbox-wrapper__fake-checkbox--disabled'), this.state !== 'none' && prefix(`checkbox-wrapper__fake-checkbox--${this.state}`));
        const iconClasses = cx(prefix('checkbox-wrapper__icon'), (this.checked || this.indeterminate) && prefix('checkbox-wrapper__icon--checked'));
        const labelTextClasses = cx(prefix('checkbox-wrapper__label-text'), mapBreakpointPropToPrefixedClasses('checkbox-wrapper__label-text-', this.hideLabel, ['hidden', 'visible']), this.disabled && prefix('checkbox-wrapper__label-text--disabled'));
        const messageClasses = cx(prefix('checkbox-wrapper__message'), this.state !== 'none' && prefix(`checkbox-wrapper__message--${this.state}`));
        return (h(Host, null,
            h("label", { class: labelClasses },
                this.isLabelVisible && (h("p-text", { class: labelTextClasses, tag: "span", color: "inherit", onClick: this.labelClick }, this.label || (h("span", null,
                    h("slot", { name: "label" }))))),
                h("span", { class: fakeCheckboxClasses },
                    h("p-icon", { class: iconClasses, name: this.indeterminate ? 'minus' : 'check', theme: "dark", size: "inherit", "aria-hidden": "true" }),
                    h("slot", null))),
            this.isMessageVisible && (h("p-text", { class: messageClasses, color: "inherit", role: this.state === 'error' && 'alert' }, this.message || (h("span", null,
                h("slot", { name: "message" })))))));
    }
    get isLabelVisible() {
        return !!this.label || !!this.host.querySelector('[slot="label"]');
    }
    get isMessageDefined() {
        return !!this.message || !!this.host.querySelector('[slot="message"]');
    }
    get isMessageVisible() {
        return ['success', 'error'].includes(this.state) && this.isMessageDefined;
    }
    setInput() {
        this.input = this.host.querySelector('input[type="checkbox"]');
    }
    /*
     * This is a workaround to improve accessibility because the input and the label/description/message text are placed in different DOM.
     * Referencing ID's from outside the component is impossible because the web componentâ€™s DOM is separate.
     * We have to wait for full support of the Accessibility Object Model (AOM) to provide the relationship between shadow DOM and slots
     */
    setAriaAttributes() {
        if (this.label && this.message) {
            this.input.setAttribute('aria-label', `${this.label}. ${this.message}`);
        }
        else if (this.label) {
            this.input.setAttribute('aria-label', this.label);
        }
        if (this.state === 'error') {
            this.input.setAttribute('aria-invalid', 'true');
        }
        else {
            this.input.removeAttribute('aria-invalid');
        }
    }
    bindStateListener() {
        transitionListener(this.input, 'border-top-color', this.setState);
    }
    addSlottedStyles() {
        const tagName = this.host.tagName.toLowerCase();
        const style = `${tagName} a {
      outline: none transparent;
      color: inherit;
      text-decoration: underline;
      -webkit-transition: outline-color .24s ease, color .24s ease;
      transition: outline-color .24s ease, color .24s ease;
    }

    ${tagName} a:hover {
      color: #d5001c;
    }

    ${tagName} a:focus {
      outline: 2px solid #00d5b9;
      outline-offset: 1px;
    }`;
        insertSlottedStyles(this.host, style);
    }
    static get is() { return "p-checkbox-wrapper"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["checkbox-wrapper.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["checkbox-wrapper.css"]
    }; }
    static get properties() { return {
        "label": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The label text."
            },
            "attribute": "label",
            "reflect": false,
            "defaultValue": "''"
        },
        "state": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "FormState",
                "resolved": "\"error\" | \"none\" | \"success\"",
                "references": {
                    "FormState": {
                        "location": "import",
                        "path": "../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The validation state."
            },
            "attribute": "state",
            "reflect": false,
            "defaultValue": "'none'"
        },
        "message": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The message styled depending on validation state."
            },
            "attribute": "message",
            "reflect": false,
            "defaultValue": "''"
        },
        "hideLabel": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "BreakpointCustomizable<boolean>",
                "resolved": "BreakpointValues<boolean> | boolean | string",
                "references": {
                    "BreakpointCustomizable": {
                        "location": "import",
                        "path": "../../../utils"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Show or hide label. For better accessibility it's recommended to show the label."
            },
            "attribute": "hide-label",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get states() { return {
        "checked": {},
        "disabled": {},
        "indeterminate": {}
    }; }
    static get elementRef() { return "host"; }
}
