import { Host, Component, Prop, h, Element, State } from '@stencil/core';
import cx from 'classnames';
import { mapBreakpointPropToPrefixedClasses, prefix, transitionListener, insertSlottedStyles, handleButtonEvent } from '../../../utils';
export class TextFieldWrapper {
    constructor() {
        /** The label text. */
        this.label = '';
        /** The description text. */
        this.description = '';
        /** The validation state. */
        this.state = 'none';
        /** The message styled depending on validation state. */
        this.message = '';
        /** Show or hide label and description text. For better accessibility it is recommended to show the label. */
        this.hideLabel = false;
        this.showPassword = false;
        this.searchButtonType = 'submit';
        this.setState = () => {
            this.disabled = this.input.disabled;
            this.readonly = this.input.readOnly;
        };
        this.labelClick = () => {
            this.input.focus();
        };
        this.togglePassword = () => {
            this.input.type = this.input.type === 'password' ? 'text' : 'password';
            this.showPassword = !this.showPassword;
            this.labelClick();
        };
        this.onSubmitHandler = (event) => {
            if (this.isInputTypeSearch) {
                handleButtonEvent(event, this.host, () => this.searchButtonType, () => this.disabled);
            }
        };
    }
    componentWillLoad() {
        this.setInput();
        this.setAriaAttributes();
        this.setState();
        this.updatePasswordToggleable();
        this.initInputTypeSearch();
        this.bindStateListener();
        this.addSlottedStyles();
    }
    componentDidUpdate() {
        this.setAriaAttributes();
    }
    render() {
        const containerClasses = cx(prefix('text-field-wrapper__container'));
        const labelClasses = cx(prefix('text-field-wrapper__label'));
        const labelTextClasses = cx(prefix('text-field-wrapper__label-text'), mapBreakpointPropToPrefixedClasses('text-field-wrapper__label-text-', this.hideLabel, ['hidden', 'visible']), this.disabled && prefix('text-field-wrapper__label-text--disabled'));
        const descriptionTextClasses = cx(prefix('text-field-wrapper__description-text'), mapBreakpointPropToPrefixedClasses('text-field-wrapper__description-text-', this.hideLabel, [
            'hidden',
            'visible'
        ]), this.disabled && prefix('text-field-wrapper__description-text--disabled'));
        const fakeInputClasses = cx(prefix('text-field-wrapper__fake-input'), this.state !== 'none' && prefix(`text-field-wrapper__fake-input--${this.state}`), this.disabled && prefix('text-field-wrapper__fake-input--disabled'), this.readonly && prefix('text-field-wrapper__fake-input--readonly'));
        const buttonClasses = cx(prefix('text-field-wrapper__button'));
        const messageClasses = cx(prefix('text-field-wrapper__message'), this.state !== 'none' && prefix(`text-field-wrapper__message--${this.state}`));
        return (h(Host, null,
            h("div", { class: containerClasses },
                h("label", { class: labelClasses },
                    this.isLabelVisible && (h("p-text", { class: labelTextClasses, tag: "span", color: "inherit", onClick: this.labelClick }, this.label || (h("span", null,
                        h("slot", { name: "label" }))))),
                    this.isDescriptionVisible && (h("p-text", { class: descriptionTextClasses, tag: "span", color: "inherit", size: "x-small", onClick: this.labelClick }, this.description || (h("span", null,
                        h("slot", { name: "description" }))))),
                    h("span", { class: fakeInputClasses },
                        h("slot", null))),
                this.isPasswordToggleable && (h("button", { type: "button", class: buttonClasses, onClick: this.togglePassword, disabled: this.disabled },
                    h("p-icon", { name: this.showPassword ? 'view-off' : 'view', color: "inherit" }))),
                this.isInputTypeSearch && (h("button", { onClick: this.onSubmitHandler, type: "submit", class: buttonClasses, disabled: this.disabled || this.readonly },
                    h("p-icon", { name: "search", color: "inherit" })))),
            this.isMessageVisible && (h("p-text", { class: messageClasses, color: "inherit", role: this.state === 'error' && 'alert' }, this.message || (h("span", null,
                h("slot", { name: "message" })))))));
    }
    get isLabelVisible() {
        return !!this.label || !!this.host.querySelector('[slot="label"]');
    }
    get isDescriptionVisible() {
        return !!this.description || !!this.host.querySelector('[slot="description"]');
    }
    get isMessageDefined() {
        return !!this.message || !!this.host.querySelector('[slot="message"]');
    }
    get isMessageVisible() {
        return ['success', 'error'].includes(this.state) && this.isMessageDefined;
    }
    setInput() {
        this.input = this.host.querySelector('input');
    }
    /*
     * This is a workaround to improve accessibility because the input and the label/description/message text are placed in different DOM.
     * Referencing ID's from outside the component is impossible because the web componentâ€™s DOM is separate.
     * We have to wait for full support of the Accessibility Object Model (AOM) to provide the relationship between shadow DOM and slots
     */
    setAriaAttributes() {
        if (this.label && this.message) {
            this.input.setAttribute('aria-label', `${this.label}. ${this.message}`);
        }
        else if (this.label && this.description) {
            this.input.setAttribute('aria-label', `${this.label}. ${this.description}`);
        }
        else if (this.label) {
            this.input.setAttribute('aria-label', this.label);
        }
        if (this.state === 'error') {
            this.input.setAttribute('aria-invalid', 'true');
        }
        else {
            this.input.removeAttribute('aria-invalid');
        }
    }
    bindStateListener() {
        transitionListener(this.input, 'border-top-color', this.setState);
    }
    updatePasswordToggleable() {
        this.isPasswordToggleable = this.input.type === 'password';
        if (this.isPasswordToggleable) {
            this.input.style.cssText = 'padding-right: 3rem !important';
        }
    }
    initInputTypeSearch() {
        this.isInputTypeSearch = this.input.type === 'search';
        if (this.isInputTypeSearch) {
            this.input.style.cssText = 'padding-right: 3rem !important';
        }
    }
    addSlottedStyles() {
        const tagName = this.host.tagName.toLowerCase();
        const style = `${tagName} a {
      outline: none transparent;
      color: inherit;
      text-decoration: underline;
      -webkit-transition: outline-color .24s ease, color .24s ease;
      transition: outline-color .24s ease, color .24s ease;
    }

    ${tagName} a:hover {
      color: #d5001c;
    }

    ${tagName} a:focus {
      outline: 2px solid #00d5b9;
      outline-offset: 1px;
    }

    ${tagName} input::-webkit-outer-spin-button {
      appearance: none !important;
      -webkit-appearance: none !important;
    }

    ${tagName} input::-webkit-inner-spin-button {
      appearance: none !important;
      -webkit-appearance: none !important;
    }

    ${tagName} input[type=password]::-webkit-contacts-auto-fill-button,
    ${tagName} input[type=password]::-webkit-credentials-auto-fill-button {
      margin-right: 2rem;
    }

    ${tagName} input[type=search]::-webkit-search-cancel-button {
      margin-right: 2rem;
    }
    `;
        insertSlottedStyles(this.host, style);
    }
    static get is() { return "p-text-field-wrapper"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["text-field-wrapper.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["text-field-wrapper.css"]
    }; }
    static get properties() { return {
        "label": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The label text."
            },
            "attribute": "label",
            "reflect": false,
            "defaultValue": "''"
        },
        "description": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The description text."
            },
            "attribute": "description",
            "reflect": false,
            "defaultValue": "''"
        },
        "state": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "FormState",
                "resolved": "\"error\" | \"none\" | \"success\"",
                "references": {
                    "FormState": {
                        "location": "import",
                        "path": "../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The validation state."
            },
            "attribute": "state",
            "reflect": false,
            "defaultValue": "'none'"
        },
        "message": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The message styled depending on validation state."
            },
            "attribute": "message",
            "reflect": false,
            "defaultValue": "''"
        },
        "hideLabel": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "BreakpointCustomizable<boolean>",
                "resolved": "BreakpointValues<boolean> | boolean | string",
                "references": {
                    "BreakpointCustomizable": {
                        "location": "import",
                        "path": "../../../utils"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Show or hide label and description text. For better accessibility it is recommended to show the label."
            },
            "attribute": "hide-label",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get states() { return {
        "disabled": {},
        "readonly": {},
        "showPassword": {}
    }; }
    static get elementRef() { return "host"; }
}
