import { Component, Element, h, Prop } from '@stencil/core';
import { prefix, insertSlottedStyles, mapBreakpointPropToPrefixedClasses } from '../../../utils';
import { improveFocusHandlingForCustomElement } from '../../../utils/focusHandling';
export class LinkSocial {
    constructor() {
        /** The icon shown. */
        this.icon = undefined;
        /** A custom URL path to a custom social icon. */
        this.iconSource = undefined;
        /** When providing an url then the component will be rendered as `<a>`. */
        this.href = undefined;
        /** Adapts the icon color when used on dark background. */
        this.theme = 'light';
        /** Target attribute where the link should be opened. */
        this.target = '_self';
        /** Specifies the relationship of the target object to the link object. */
        this.rel = undefined;
        /** Show or hide label. */
        this.hideLabel = false;
    }
    componentWillLoad() {
        this.addSlottedStyles();
        improveFocusHandlingForCustomElement(this.host);
    }
    render() {
        const TagType = this.href === undefined ? 'span' : 'a';
        const linkClasses = Object.assign({ [prefix('link-social')]: true, [prefix(`link-social--${this.icon}`)]: true, [prefix(`link-social--theme-${this.theme}`)]: true }, mapBreakpointPropToPrefixedClasses('link-social-', this.hideLabel, ['without-label', 'with-label']));
        const iconClasses = prefix('link-social__icon');
        const labelClasses = prefix('link-social__label');
        return (h(TagType, Object.assign({ class: linkClasses }, (TagType === 'a' ? {
            href: this.href,
            target: this.target,
            rel: this.rel
        } : null)),
            h("p-icon", { class: iconClasses, size: 'inherit', name: this.icon, source: this.iconSource, color: 'inherit', "aria-hidden": 'true' }),
            h("p-text", { tag: 'span', color: 'inherit', class: labelClasses },
                h("slot", null))));
    }
    addSlottedStyles() {
        const tagName = this.host.tagName.toLowerCase();
        const style = `a:focus ${tagName} {
      outline: 2px solid #00d5b9;
      outline-offset: 1px;
    }

    /* this hack is only needed for Safari which does not support pseudo elements in slotted context (https://bugs.webkit.org/show_bug.cgi?id=178237) :-( */
    ${tagName} a::before {
      content: "" !important;
      position: absolute !important;
      top: 0 !important;
      left: 0 !important;
      right: 0 !important;
      bottom: 0 !important;
      display: block !important;
      transition: outline-color 0.24s ease !important;
    }

    ${tagName} a:focus::before {
      outline-offset: 1px !important;
      outline: #00d5b9 solid 2px !important;
    }
    `;
        insertSlottedStyles(this.host, style);
    }
    static get is() { return "p-link-social"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["link-social.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["link-social.css"]
    }; }
    static get properties() { return {
        "icon": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'logo-facebook'\n  | 'logo-google'\n  | 'logo-instagram'\n  | 'logo-linkedin'\n  | 'logo-pinterest'\n  | 'logo-twitter'\n  | 'logo-wechat'\n  | 'logo-whatsapp'\n  | 'logo-xing'\n  | 'logo-youtube'\n  | 'logo-baidu'\n  | 'logo-delicious'\n  | 'logo-digg'\n  | 'logo-foursquare'\n  | 'logo-gmail'\n  | 'logo-hatena'\n  | 'logo-kaixin'\n  | 'logo-qq-share'\n  | 'logo-qq'\n  | 'logo-skyrock'\n  | 'logo-sohu'\n  | 'logo-tecent'\n  | 'logo-telegram'\n  | 'logo-tumblr'\n  | 'logo-viber'\n  | 'logo-vk'\n  | 'logo-weibo'\n  | 'logo-yahoo'\n  | 'logo-youku'",
                "resolved": "\"logo-baidu\" | \"logo-delicious\" | \"logo-digg\" | \"logo-facebook\" | \"logo-foursquare\" | \"logo-gmail\" | \"logo-google\" | \"logo-hatena\" | \"logo-instagram\" | \"logo-kaixin\" | \"logo-linkedin\" | \"logo-pinterest\" | \"logo-qq\" | \"logo-qq-share\" | \"logo-skyrock\" | \"logo-sohu\" | \"logo-tecent\" | \"logo-telegram\" | \"logo-tumblr\" | \"logo-twitter\" | \"logo-viber\" | \"logo-vk\" | \"logo-wechat\" | \"logo-weibo\" | \"logo-whatsapp\" | \"logo-xing\" | \"logo-yahoo\" | \"logo-youku\" | \"logo-youtube\"",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The icon shown."
            },
            "attribute": "icon",
            "reflect": false,
            "defaultValue": "undefined"
        },
        "iconSource": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "A custom URL path to a custom social icon."
            },
            "attribute": "icon-source",
            "reflect": false,
            "defaultValue": "undefined"
        },
        "href": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "When providing an url then the component will be rendered as `<a>`."
            },
            "attribute": "href",
            "reflect": false,
            "defaultValue": "undefined"
        },
        "theme": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "Theme",
                "resolved": "\"dark\" | \"light\"",
                "references": {
                    "Theme": {
                        "location": "import",
                        "path": "../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Adapts the icon color when used on dark background."
            },
            "attribute": "theme",
            "reflect": false,
            "defaultValue": "'light'"
        },
        "target": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "LinkTarget",
                "resolved": "string",
                "references": {
                    "LinkTarget": {
                        "location": "import",
                        "path": "../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Target attribute where the link should be opened."
            },
            "attribute": "target",
            "reflect": false,
            "defaultValue": "'_self'"
        },
        "rel": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Specifies the relationship of the target object to the link object."
            },
            "attribute": "rel",
            "reflect": false,
            "defaultValue": "undefined"
        },
        "hideLabel": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "BreakpointCustomizable<boolean>",
                "resolved": "BreakpointValues<boolean> | boolean | string",
                "references": {
                    "BreakpointCustomizable": {
                        "location": "import",
                        "path": "../../../utils"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Show or hide label."
            },
            "attribute": "hide-label",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get elementRef() { return "host"; }
}
