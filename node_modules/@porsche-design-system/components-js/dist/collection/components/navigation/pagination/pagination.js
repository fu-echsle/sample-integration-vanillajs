import { Component, Event, Element, h, Prop, State, Watch } from '@stencil/core';
import cx from 'classnames';
import { mapBreakpointPropToPrefixedClasses, prefix } from '../../../utils';
import { createPaginationModel, getCurrentActivePage, getTotalPages, itemTypes } from './pagination-helper';
import { listenResize } from '../../../utils/window-resize-listener';
import { readCounterResetValue } from '../../../utils/counter-reset-reader';
import { improveFocusHandlingForCustomElement } from '../../../utils/focusHandling';
export class Pagination {
    constructor() {
        /** The total count of items. */
        this.totalItemsCount = 1;
        /** The total count of items which should be shown per page.  */
        this.itemsPerPage = 1;
        /** Index of the currently active page. */
        this.activePage = 1;
        /** The maximum number of page links rendered */
        this.maxNumberOfPageLinks = {
            base: 5,
            xs: 7
        };
        /** Aria label what the pagination is used for. */
        this.allyLabel = 'Pagination';
        /** Aria label for previous page icon. */
        this.allyLabelPrev = 'Previous page';
        /** Aria label for page navigation. */
        this.allyLabelPage = 'Page';
        /** Aria label for next page icon. */
        this.allyLabelNext = 'Next page';
        /** Adapts the color when used on dark background. */
        this.theme = 'light';
    }
    onActivePageChange(page, previousPage) {
        this.pageChange.emit({ page, previousPage });
    }
    componentDidLoad() {
        improveFocusHandlingForCustomElement(this.element);
        this.unlistenResize = listenResize(() => {
            this.updateMaxNumberOfPageLinks();
        });
        this.updateMaxNumberOfPageLinks();
    }
    componentDidUnload() {
        this.unlistenResize();
    }
    render() {
        const breakpointClasses = mapBreakpointPropToPrefixedClasses('pagination--size', this.maxNumberOfPageLinks);
        const pageRange = this.breakpointMaxNumberOfPageLinks === 7 ? 1 : 0;
        const paginationClasses = cx(breakpointClasses, prefix('pagination'), prefix(`pagination--theme-${this.theme}`));
        const paginationItemsClasses = cx(prefix('pagination__items'));
        const pageTotal = getTotalPages(this.totalItemsCount, this.itemsPerPage);
        const activePage = getCurrentActivePage(this.activePage, pageTotal);
        // generate pagination items
        const createPaginationItems = () => {
            const paginationModel = createPaginationModel({
                activePage,
                pageTotal,
                pageRange
            });
            const pageItems = [];
            let prevItem;
            let nextItem;
            const paginationItemClasses = cx(prefix('pagination__item'));
            paginationModel.forEach((pageModel) => {
                if (pageModel.type === itemTypes.PREVIOUS_PAGE_LINK) {
                    const paginationPrevClasses = cx(prefix('pagination__prev'), !pageModel.isActive && prefix('pagination__prev--disabled'));
                    return (prevItem = (h("li", Object.assign({}, pageModel, { class: paginationItemClasses }),
                        h("span", { class: paginationPrevClasses, role: 'button', tabIndex: pageModel.isActive ? 0 : null, onClick: () => this.onClick(pageModel.value), onKeyDown: (e) => this.onKeyDown(e, pageModel.value), "aria-disabled": !pageModel.isActive && 'true', "aria-label": this.allyLabelPrev },
                            h("p-icon", { name: "arrow-head-left", color: "inherit" })))));
                }
                if (pageModel.type === itemTypes.ELLIPSIS) {
                    const paginationGoToClasses = cx(prefix('pagination__goto'), prefix('pagination__goto--ellipsis'));
                    pageItems.push(h("li", Object.assign({}, pageModel, { class: paginationItemClasses }),
                        h("span", { class: paginationGoToClasses })));
                }
                if (pageModel.type === itemTypes.PAGE) {
                    const paginationGoToClasses = cx(prefix('pagination__goto'), pageModel.isActive && prefix('pagination__goto--current'));
                    pageItems.push(h("li", Object.assign({}, pageModel, { class: paginationItemClasses }),
                        h("span", { class: paginationGoToClasses, role: 'button', tabIndex: pageModel.isActive ? null : 0, "aria-disabled": pageModel.isActive && 'true', onClick: () => this.onClick(pageModel.value), onKeyDown: (e) => this.onKeyDown(e, pageModel.value), "aria-label": `${this.allyLabelPage} ${pageModel.value}`, "aria-current": pageModel.isActive && 'page' }, pageModel.value)));
                }
                if (pageModel.type === itemTypes.NEXT_PAGE_LINK) {
                    const paginationNextClasses = cx(prefix('pagination__next'), !pageModel.isActive && prefix('pagination__next--disabled'));
                    return (nextItem = (h("li", Object.assign({}, pageModel, { class: paginationItemClasses }),
                        h("span", { class: paginationNextClasses, role: 'button', tabIndex: pageModel.isActive ? 0 : null, onClick: () => this.onClick(pageModel.value), onKeyDown: (e) => this.onKeyDown(e, pageModel.value), "aria-disabled": !pageModel.isActive && 'true', "aria-label": this.allyLabelNext },
                            h("p-icon", { name: "arrow-head-right", color: "inherit" })))));
                }
            });
            return {
                prevItem,
                pageItems,
                nextItem
            };
        };
        const paginationItems = createPaginationItems();
        return (h("nav", { class: paginationClasses, role: "navigation", "aria-label": this.allyLabel, ref: (el) => (this.navigationElement = el) },
            h("ul", { class: paginationItemsClasses },
                paginationItems.prevItem,
                paginationItems.pageItems,
                paginationItems.nextItem)));
    }
    onKeyDown(event, page) {
        /**
         * from https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/button_role
         */
        if (event.key === ' ' || event.key === 'Enter' || event.key === 'Spacebar') {
            /**
             * Prevent the default action to stop scrolling when space is pressed
             */
            event.preventDefault();
            this.onClick(page);
        }
    }
    onClick(page) {
        if (page !== this.activePage) {
            this.activePage = page;
        }
    }
    updateMaxNumberOfPageLinks() {
        const { size } = readCounterResetValue(this.navigationElement);
        this.breakpointMaxNumberOfPageLinks = size;
    }
    static get is() { return "p-pagination"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["pagination.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["pagination.css"]
    }; }
    static get properties() { return {
        "totalItemsCount": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The total count of items."
            },
            "attribute": "total-items-count",
            "reflect": false,
            "defaultValue": "1"
        },
        "itemsPerPage": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The total count of items which should be shown per page."
            },
            "attribute": "items-per-page",
            "reflect": false,
            "defaultValue": "1"
        },
        "activePage": {
            "type": "number",
            "mutable": true,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Index of the currently active page."
            },
            "attribute": "active-page",
            "reflect": true,
            "defaultValue": "1"
        },
        "maxNumberOfPageLinks": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "NumberOfPageLinks | BreakpointCustomizable<NumberOfPageLinks>",
                "resolved": "5 | 7 | BreakpointValues<NumberOfPageLinks> | string",
                "references": {
                    "NumberOfPageLinks": {
                        "location": "local"
                    },
                    "BreakpointCustomizable": {
                        "location": "import",
                        "path": "../../../utils"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The maximum number of page links rendered"
            },
            "attribute": "max-number-of-page-links",
            "reflect": false,
            "defaultValue": "{\n    base: 5,\n    xs: 7\n  }"
        },
        "allyLabel": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Aria label what the pagination is used for."
            },
            "attribute": "ally-label",
            "reflect": false,
            "defaultValue": "'Pagination'"
        },
        "allyLabelPrev": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Aria label for previous page icon."
            },
            "attribute": "ally-label-prev",
            "reflect": false,
            "defaultValue": "'Previous page'"
        },
        "allyLabelPage": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Aria label for page navigation."
            },
            "attribute": "ally-label-page",
            "reflect": false,
            "defaultValue": "'Page'"
        },
        "allyLabelNext": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Aria label for next page icon."
            },
            "attribute": "ally-label-next",
            "reflect": false,
            "defaultValue": "'Next page'"
        },
        "theme": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'light' | 'dark'",
                "resolved": "\"dark\" | \"light\"",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Adapts the color when used on dark background."
            },
            "attribute": "theme",
            "reflect": false,
            "defaultValue": "'light'"
        }
    }; }
    static get states() { return {
        "breakpointMaxNumberOfPageLinks": {}
    }; }
    static get events() { return [{
            "method": "pageChange",
            "name": "pageChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the page changes."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "element"; }
    static get watchers() { return [{
            "propName": "activePage",
            "methodName": "onActivePageChange"
        }]; }
}
