import { Component, Host, h, Element } from '@stencil/core';
import { insertSlottedStyles, prefix } from '../../../../utils';
export class TextListItem {
    componentDidLoad() {
        this.addSlottedStyles();
    }
    render() {
        const textListItemClasses = {
            [prefix('text-list-item')]: true,
            [prefix(`text-list-item--${this.typeOfList}`)]: true,
            [prefix(`text-list-item--ordered-${this.typeOfOrderedList}`)]: this.typeOfList === 'ordered',
            [prefix('text-list-item--nested')]: this.isNestedList
        };
        return (h(Host, { role: "listitem", class: textListItemClasses },
            h("slot", null)));
    }
    get typeOfList() {
        const list = this.host.closest(prefix('text-list'));
        return list.getAttribute('list-type');
    }
    get typeOfOrderedList() {
        const list = this.host.closest(prefix('text-list'));
        return list.getAttribute('order-type');
    }
    get isNestedList() {
        return !!this.host.closest(prefix('text-list[nested]'));
    }
    addSlottedStyles() {
        const tagName = this.host.tagName.toLowerCase();
        const style = `${tagName} a {
      outline: none transparent;
      color: inherit;
      text-decoration: underline;
      -webkit-transition: outline-color .24s ease, color .24s ease;
      transition: outline-color .24s ease, color .24s ease;
    }

    ${tagName} a:hover {
      color: #d5001c;
    }

    ${tagName} a:focus {
      outline: 2px solid #00d5b9;
      outline-offset: 1px;
    }
    `;
        insertSlottedStyles(this.host, style);
    }
    static get is() { return "p-text-list-item"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["text-list-item.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["text-list-item.css"]
    }; }
    static get elementRef() { return "host"; }
}
