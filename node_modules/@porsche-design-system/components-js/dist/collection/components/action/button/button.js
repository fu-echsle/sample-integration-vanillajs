import { Component, Prop, h, Element, Listen } from '@stencil/core';
import { mapBreakpointPropToPrefixedClasses, prefix } from '../../../utils';
import { improveFocusHandlingForCustomElement } from '../../../utils/focusHandling';
import { improveButtonHandlingForCustomElement } from '../../../utils/buttonHandling';
export class Button {
    constructor() {
        /** To remove the element from tab order. */
        this.tabbable = true;
        /** Specifies the type of the button. */
        this.type = 'button';
        /** Disables the button. No events will be triggered while disabled state is active. */
        this.disabled = false;
        /** Disables the button and shows a loading indicator. No events will be triggered while loading state is active. */
        this.loading = false;
        /** The style variant of the button. */
        this.variant = 'secondary';
        /** The icon shown. */
        this.icon = 'arrow-head-right';
        /** A custom URL path to a custom icon. */
        this.iconSource = undefined;
        /** Show or hide label. For better accessibility it is recommended to show the label. */
        this.hideLabel = false;
        /** Adapts the button color depending on the theme. */
        this.theme = 'light';
    }
    handleOnClick(e) {
        if (this.isDisabled()) {
            e.stopPropagation();
        }
    }
    componentDidLoad() {
        improveFocusHandlingForCustomElement(this.element);
        improveButtonHandlingForCustomElement(this.element, () => this.type, () => this.isDisabled());
    }
    render() {
        const buttonClasses = Object.assign({ [prefix('button')]: true, [prefix(`button--${this.variant}`)]: true, [prefix(`button--theme-${this.theme}`)]: true }, mapBreakpointPropToPrefixedClasses('button-', this.hideLabel, ['without-label', 'with-label']));
        const iconClasses = prefix('button__icon');
        const labelClasses = prefix('button__label');
        return (h("button", { class: buttonClasses, type: this.type, disabled: this.isDisabled(), tabindex: this.tabbable ? 0 : -1, "aria-busy": this.loading && 'true' },
            this.loading ? (h("p-spinner", { class: iconClasses, size: "inherit", theme: (this.variant === 'tertiary' && this.theme) || 'dark' })) : (h("p-icon", { class: iconClasses, size: "inherit", name: this.icon, source: this.iconSource, color: "inherit", "aria-hidden": "true" })),
            h("p-text", { class: labelClasses, tag: "span", color: "inherit" },
                h("slot", null))));
    }
    isDisabled() {
        return this.disabled || this.loading;
    }
    static get is() { return "p-button"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["button.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["button.css"]
    }; }
    static get properties() { return {
        "tabbable": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "To remove the element from tab order."
            },
            "attribute": "tabbable",
            "reflect": false,
            "defaultValue": "true"
        },
        "type": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "ButtonType",
                "resolved": "\"button\" | \"reset\" | \"submit\"",
                "references": {
                    "ButtonType": {
                        "location": "import",
                        "path": "../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Specifies the type of the button."
            },
            "attribute": "type",
            "reflect": false,
            "defaultValue": "'button'"
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Disables the button. No events will be triggered while disabled state is active."
            },
            "attribute": "disabled",
            "reflect": true,
            "defaultValue": "false"
        },
        "loading": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Disables the button and shows a loading indicator. No events will be triggered while loading state is active."
            },
            "attribute": "loading",
            "reflect": false,
            "defaultValue": "false"
        },
        "variant": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'primary' | 'secondary' | 'tertiary'",
                "resolved": "\"primary\" | \"secondary\" | \"tertiary\"",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The style variant of the button."
            },
            "attribute": "variant",
            "reflect": false,
            "defaultValue": "'secondary'"
        },
        "icon": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "IconName",
                "resolved": "\"light\" | \"reset\" | \"360\" | \"active-cabin-ventilation\" | \"add\" | \"adjust\" | \"arrow-double-down\" | \"arrow-double-left\" | \"arrow-double-right\" | \"arrow-double-up\" | \"arrow-down\" | \"arrow-first\" | \"arrow-head-down\" | \"arrow-head-left\" | \"arrow-head-right\" | \"arrow-head-up\" | \"arrow-last\" | \"arrow-left\" | \"arrow-right\" | \"arrow-up\" | \"augmented-reality\" | \"battery-empty\" | \"battery-full\" | \"bell\" | \"bookmark\" | \"broadcast\" | \"calculator\" | \"calendar\" | \"camera\" | \"car\" | \"car-battery\" | \"card\" | \"charging-active\" | \"charging-state\" | \"charging-station\" | \"chart\" | \"chat\" | \"check\" | \"city\" | \"climate\" | \"climate-control\" | \"clock\" | \"close\" | \"closed-caption\" | \"co2-emission\" | \"compare\" | \"configurate\" | \"country-road\" | \"cubic-capacity\" | \"delete\" | \"disable\" | \"document\" | \"download\" | \"duration\" | \"edit\" | \"email\" | \"exclamation\" | \"external\" | \"filter\" | \"flash\" | \"fuel-station\" | \"garage\" | \"gift\" | \"globe\" | \"grid\" | \"highway\" | \"home\" | \"horn\" | \"image\" | \"increase\" | \"information\" | \"key\" | \"leaf\" | \"leather\" | \"list\" | \"locate\" | \"lock\" | \"lock-open\" | \"logo-baidu\" | \"logo-delicious\" | \"logo-digg\" | \"logo-facebook\" | \"logo-foursquare\" | \"logo-gmail\" | \"logo-google\" | \"logo-hatena\" | \"logo-instagram\" | \"logo-kaixin\" | \"logo-linkedin\" | \"logo-pinterest\" | \"logo-qq\" | \"logo-qq-share\" | \"logo-skyrock\" | \"logo-sohu\" | \"logo-tecent\" | \"logo-telegram\" | \"logo-tumblr\" | \"logo-twitter\" | \"logo-viber\" | \"logo-vk\" | \"logo-wechat\" | \"logo-weibo\" | \"logo-whatsapp\" | \"logo-xing\" | \"logo-yahoo\" | \"logo-youku\" | \"logo-youtube\" | \"logout\" | \"map\" | \"menu-dots-horizontal\" | \"menu-lines\" | \"minus\" | \"mobile\" | \"moon\" | \"oil-can\" | \"parking-brake\" | \"parking-light\" | \"pause\" | \"phone\" | \"pin\" | \"play\" | \"plug\" | \"plus\" | \"preheating\" | \"printer\" | \"purchase\" | \"question\" | \"racing-flag\" | \"refresh\" | \"replay\" | \"route\" | \"rss\" | \"save\" | \"screen\" | \"search\" | \"send\" | \"share\" | \"shopping-bag\" | \"shopping-cart\" | \"sidelights\" | \"snowflake\" | \"sort\" | \"stack\" | \"star\" | \"steering-wheel\" | \"stopwatch\" | \"subtract\" | \"sun\" | \"switch\" | \"tablet\" | \"tachometer\" | \"truck\" | \"upload\" | \"user\" | \"user-group\" | \"user-manual\" | \"video\" | \"view\" | \"view-off\" | \"volume-off\" | \"volume-up\" | \"warning\" | \"weight\" | \"wifi\" | \"work\" | \"wrench\" | \"wrenches\" | \"zoom-in\" | \"zoom-out\"",
                "references": {
                    "IconName": {
                        "location": "import",
                        "path": "../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The icon shown."
            },
            "attribute": "icon",
            "reflect": false,
            "defaultValue": "'arrow-head-right'"
        },
        "iconSource": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "A custom URL path to a custom icon."
            },
            "attribute": "icon-source",
            "reflect": false,
            "defaultValue": "undefined"
        },
        "hideLabel": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "BreakpointCustomizable<boolean>",
                "resolved": "BreakpointValues<boolean> | boolean | string",
                "references": {
                    "BreakpointCustomizable": {
                        "location": "import",
                        "path": "../../../utils"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Show or hide label. For better accessibility it is recommended to show the label."
            },
            "attribute": "hide-label",
            "reflect": false,
            "defaultValue": "false"
        },
        "theme": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "Theme",
                "resolved": "\"dark\" | \"light\"",
                "references": {
                    "Theme": {
                        "location": "import",
                        "path": "../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Adapts the button color depending on the theme."
            },
            "attribute": "theme",
            "reflect": false,
            "defaultValue": "'light'"
        }
    }; }
    static get elementRef() { return "element"; }
    static get listeners() { return [{
            "name": "click",
            "method": "handleOnClick",
            "target": undefined,
            "capture": true,
            "passive": false
        }]; }
}
