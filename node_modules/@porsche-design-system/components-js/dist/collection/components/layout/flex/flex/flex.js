import { Component, Host, Prop, h } from '@stencil/core';
import { mapBreakpointPropToPrefixedClasses, prefix } from '../../../../utils';
export class Flex {
    constructor() {
        /** Defines the flex containers content flow if 2 or more containers are siblings of each other. */
        this.inline = false;
        /** If set, overflowing elements will wrap to a new line. */
        this.wrap = 'nowrap';
        /** Defines the direction of the main and cross axis. The default "row" defines the main axis as horizontal left to right. */
        this.direction = 'row';
        /** Defines how the flex items are aligned along the main axis. */
        this.justifyContent = 'flex-start';
        /** Defines how the flex items are aligned along the cross axis. */
        this.alignItems = 'stretch';
        /** This aligns a flex container's individual lines when there is extra space in the cross-axis, similar to how "justifyContent" aligns individual items along the main axis. */
        this.alignContent = 'stretch';
    }
    render() {
        const flexClasses = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ [prefix('flex')]: true }, (this.inline !== false && mapBreakpointPropToPrefixedClasses('flex-', this.inline, ['inline', 'default']))), (this.wrap !== 'nowrap' && mapBreakpointPropToPrefixedClasses('flex--wrap', this.wrap))), (this.direction !== 'row' && mapBreakpointPropToPrefixedClasses('flex--direction', this.direction))), (this.justifyContent !== 'flex-start' &&
            mapBreakpointPropToPrefixedClasses('flex--justify-content', this.justifyContent))), (this.alignItems !== 'stretch' && mapBreakpointPropToPrefixedClasses('flex--align-items', this.alignItems))), (this.alignContent !== 'stretch' &&
            mapBreakpointPropToPrefixedClasses('flex--align-content', this.alignContent)));
        return h(Host, { class: flexClasses });
    }
    static get is() { return "p-flex"; }
    static get originalStyleUrls() { return {
        "$": ["flex.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["flex.css"]
    }; }
    static get properties() { return {
        "inline": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "BreakpointCustomizable<boolean>",
                "resolved": "BreakpointValues<boolean> | boolean | string",
                "references": {
                    "BreakpointCustomizable": {
                        "location": "import",
                        "path": "../../../../utils"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Defines the flex containers content flow if 2 or more containers are siblings of each other."
            },
            "attribute": "inline",
            "reflect": false,
            "defaultValue": "false"
        },
        "wrap": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "BreakpointCustomizable<'nowrap' | 'wrap' | 'wrap-reverse'>",
                "resolved": "BreakpointValues<\"nowrap\" | \"wrap\" | \"wrap-reverse\"> | string",
                "references": {
                    "BreakpointCustomizable": {
                        "location": "import",
                        "path": "../../../../utils"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "If set, overflowing elements will wrap to a new line."
            },
            "attribute": "wrap",
            "reflect": false,
            "defaultValue": "'nowrap'"
        },
        "direction": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "BreakpointCustomizable<'row' | 'row-reverse' | 'column' | 'column-reverse'>",
                "resolved": "BreakpointValues<\"row\" | \"row-reverse\" | \"column\" | \"column-reverse\"> | string",
                "references": {
                    "BreakpointCustomizable": {
                        "location": "import",
                        "path": "../../../../utils"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Defines the direction of the main and cross axis. The default \"row\" defines the main axis as horizontal left to right."
            },
            "attribute": "direction",
            "reflect": false,
            "defaultValue": "'row'"
        },
        "justifyContent": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "BreakpointCustomizable<\n  'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly'\n  >",
                "resolved": "BreakpointValues<\"center\" | \"flex-start\" | \"flex-end\" | \"space-between\" | \"space-around\" | \"space-evenly\"> | string",
                "references": {
                    "BreakpointCustomizable": {
                        "location": "import",
                        "path": "../../../../utils"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Defines how the flex items are aligned along the main axis."
            },
            "attribute": "justify-content",
            "reflect": false,
            "defaultValue": "'flex-start'"
        },
        "alignItems": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "BreakpointCustomizable<'stretch' | 'flex-start' | 'flex-end' | 'center' | 'baseline'>",
                "resolved": "BreakpointValues<\"center\" | \"flex-start\" | \"flex-end\" | \"stretch\" | \"baseline\"> | string",
                "references": {
                    "BreakpointCustomizable": {
                        "location": "import",
                        "path": "../../../../utils"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Defines how the flex items are aligned along the cross axis."
            },
            "attribute": "align-items",
            "reflect": false,
            "defaultValue": "'stretch'"
        },
        "alignContent": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "BreakpointCustomizable<\n  'stretch' | 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly'\n  >",
                "resolved": "BreakpointValues<\"center\" | \"flex-start\" | \"flex-end\" | \"space-between\" | \"space-around\" | \"space-evenly\" | \"stretch\"> | string",
                "references": {
                    "BreakpointCustomizable": {
                        "location": "import",
                        "path": "../../../../utils"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "This aligns a flex container's individual lines when there is extra space in the cross-axis, similar to how \"justifyContent\" aligns individual items along the main axis."
            },
            "attribute": "align-content",
            "reflect": false,
            "defaultValue": "'stretch'"
        }
    }; }
}
