import { Build, Component, Element, h, Host, Prop, State, Watch } from '@stencil/core';
import { buildIconUrl, DEFAULT_ICON_NAME, getSvgContent } from './icon-request';
import cx from 'classnames';
import { prefix } from '../../../utils';
export class Icon {
    constructor() {
        /**
         * Specifies which icon to use.
         */
        this.name = DEFAULT_ICON_NAME;
        /**
         * @internal
         * Specifies which icon variant to use.
         */
        this.variant = 'outline';
        /** Basic color variations depending on theme property. */
        this.color = 'default';
        /**
         * The size of the icon.
         */
        this.size = 'small';
        /**
         * If enabled, ion-icon will be loaded lazily when it's visible in the viewport.
         * Default, `false`.
         */
        this.lazy = false;
        /** Adapts the text color depending on the theme. Has no effect when "inherit" is set as color prop. */
        this.theme = 'light';
        this.isVisible = false;
    }
    loadIcon() {
        var _a;
        if (Build.isBrowser && this.isVisible) {
            this.svgContent = undefined; // reset svg content while new icon is loaded
            const url = buildIconUrl((_a = this.source) !== null && _a !== void 0 ? _a : this.name);
            getSvgContent(url).then((iconContent) => {
                var _a;
                if (url === buildIconUrl((_a = this.source) !== null && _a !== void 0 ? _a : this.name)) { // check if response matches current icon source
                    this.svgContent = iconContent;
                }
            });
        }
    }
    connectedCallback() {
        // purposely do not return the promise here because loading
        // the svg file should not hold up loading the app
        // only load the svg if it's visible
        this.waitUntilVisible(this.el, '50px', () => {
            this.isVisible = true;
            this.loadIcon();
        });
    }
    disconnectedCallback() {
        if (this.io) {
            this.io.disconnect();
            this.io = undefined;
        }
    }
    render() {
        const iconClasses = cx(prefix('icon'), prefix(`icon--size-${this.size}`), prefix(`icon--color-${this.color}`), this.color !== 'inherit' && prefix(`icon--theme-${this.theme}`));
        return (h(Host, null,
            h("i", { class: iconClasses, innerHTML: this.svgContent })));
    }
    waitUntilVisible(el, rootMargin, cb) {
        if (Build.isBrowser && this.lazy && typeof window !== 'undefined' && window.IntersectionObserver) {
            const io = this.io = new window.IntersectionObserver((data) => {
                if (data[0].isIntersecting) {
                    io.disconnect();
                    this.io = undefined;
                    cb();
                }
            }, { rootMargin });
            io.observe(el);
        }
        else {
            // browser doesn't support IntersectionObserver
            // so just fallback to always show it
            cb();
        }
    }
    static get is() { return "p-icon"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["icon.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["icon.css"]
    }; }
    static get properties() { return {
        "name": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "IconName",
                "resolved": "\"light\" | \"reset\" | \"360\" | \"add\" | \"adjust\" | \"arrow-double-down\" | \"arrow-double-left\" | \"arrow-double-right\" | \"arrow-double-up\" | \"arrow-down\" | \"arrow-first\" | \"arrow-head-down\" | \"arrow-head-left\" | \"arrow-head-right\" | \"arrow-head-up\" | \"arrow-last\" | \"arrow-left\" | \"arrow-right\" | \"arrow-up\" | \"augmented-reality\" | \"battery-empty\" | \"broadcast\" | \"calculator\" | \"calendar\" | \"camera\" | \"car\" | \"card\" | \"charging-station\" | \"chart\" | \"chat\" | \"check\" | \"city\" | \"clock\" | \"close\" | \"closed-caption\" | \"co2-emission\" | \"compare\" | \"configurate\" | \"country-road\" | \"cubic-capacity\" | \"delete\" | \"disable\" | \"document\" | \"download\" | \"duration\" | \"edit\" | \"email\" | \"exclamation\" | \"external\" | \"filter\" | \"flash\" | \"fuel-station\" | \"gift\" | \"globe\" | \"grid\" | \"highway\" | \"home\" | \"image\" | \"increase\" | \"information\" | \"leaf\" | \"leather\" | \"list\" | \"locate\" | \"lock\" | \"lock-open\" | \"logo-baidu\" | \"logo-delicious\" | \"logo-digg\" | \"logo-facebook\" | \"logo-foursquare\" | \"logo-gmail\" | \"logo-google\" | \"logo-hatena\" | \"logo-instagram\" | \"logo-kaixin\" | \"logo-linkedin\" | \"logo-pinterest\" | \"logo-qq\" | \"logo-qq-share\" | \"logo-skyrock\" | \"logo-sohu\" | \"logo-tecent\" | \"logo-telegram\" | \"logo-tumblr\" | \"logo-twitter\" | \"logo-viber\" | \"logo-vk\" | \"logo-wechat\" | \"logo-weibo\" | \"logo-whatsapp\" | \"logo-xing\" | \"logo-yahoo\" | \"logo-youku\" | \"logo-youtube\" | \"logout\" | \"menu-dots-horizontal\" | \"menu-lines\" | \"minus\" | \"mobile\" | \"moon\" | \"oil-can\" | \"pause\" | \"phone\" | \"pin\" | \"play\" | \"plug\" | \"plus\" | \"printer\" | \"purchase\" | \"question\" | \"racing-flag\" | \"refresh\" | \"replay\" | \"route\" | \"rss\" | \"save\" | \"screen\" | \"search\" | \"share\" | \"shopping-cart\" | \"snowflake\" | \"sort\" | \"stack\" | \"star\" | \"steering-wheel\" | \"stopwatch\" | \"subtract\" | \"sun\" | \"switch\" | \"tablet\" | \"tachometer\" | \"truck\" | \"upload\" | \"user\" | \"user-group\" | \"video\" | \"view\" | \"view-off\" | \"volume-off\" | \"volume-up\" | \"warning\" | \"weight\" | \"wifi\" | \"work\" | \"wrench\" | \"zoom-in\" | \"zoom-out\"",
                "references": {
                    "IconName": {
                        "location": "import",
                        "path": "../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Specifies which icon to use."
            },
            "attribute": "name",
            "reflect": false,
            "defaultValue": "DEFAULT_ICON_NAME"
        },
        "source": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Specifies a whole icon path which can be used for custom icons."
            },
            "attribute": "source",
            "reflect": false
        },
        "variant": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'outline' | 'filled'",
                "resolved": "\"filled\" | \"outline\"",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [{
                        "text": "Specifies which icon variant to use.",
                        "name": "internal"
                    }],
                "text": ""
            },
            "attribute": "variant",
            "reflect": false,
            "defaultValue": "'outline'"
        },
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'brand' | 'default' | 'neutral-contrast-high' | 'neutral-contrast-medium' | 'neutral-contrast-low' | 'notification-success' | 'notification-warning' | 'notification-error' | 'inherit'",
                "resolved": "\"brand\" | \"default\" | \"inherit\" | \"neutral-contrast-high\" | \"neutral-contrast-low\" | \"neutral-contrast-medium\" | \"notification-error\" | \"notification-success\" | \"notification-warning\"",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Basic color variations depending on theme property."
            },
            "attribute": "color",
            "reflect": false,
            "defaultValue": "'default'"
        },
        "size": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'small' | 'medium' | 'large' | 'inherit'",
                "resolved": "\"inherit\" | \"large\" | \"medium\" | \"small\"",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The size of the icon."
            },
            "attribute": "size",
            "reflect": false,
            "defaultValue": "'small'"
        },
        "lazy": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "If enabled, ion-icon will be loaded lazily when it's visible in the viewport.\nDefault, `false`."
            },
            "attribute": "lazy",
            "reflect": false,
            "defaultValue": "false"
        },
        "theme": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "Theme",
                "resolved": "\"dark\" | \"light\"",
                "references": {
                    "Theme": {
                        "location": "import",
                        "path": "../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Adapts the text color depending on the theme. Has no effect when \"inherit\" is set as color prop."
            },
            "attribute": "theme",
            "reflect": false,
            "defaultValue": "'light'"
        }
    }; }
    static get states() { return {
        "svgContent": {},
        "isVisible": {}
    }; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "source",
            "methodName": "loadIcon"
        }, {
            "propName": "name",
            "methodName": "loadIcon"
        }]; }
}
