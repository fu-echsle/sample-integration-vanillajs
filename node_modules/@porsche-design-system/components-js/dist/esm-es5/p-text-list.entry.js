import { r as registerInstance, c as prefix, h, H as Host, g as getElement } from './breakpointCustomizable-063d6106.js';
import { c as classnames } from './index-45be8764.js';
var textListCss = ":host{display:block;counter-reset:section !important}.p-text-list{font-size:1rem;line-height:1.5;font-family:\"Porsche Next\", \"Arial Narrow\", Arial, sans-serif;font-weight:400;display:block;padding:0;margin:0}.p-text-list--theme-light{color:#000}.p-text-list--theme-dark{color:#fff}";
var TextList = /** @class */ (function () {
    function TextList(hostRef) {
        registerInstance(this, hostRef);
        /** The type of the text list. */
        this.listType = 'unordered';
        /** The list style type of an ordered list. */
        this.orderType = 'numbered';
        /** Adapts the text color depending on the theme. Has no effect when "inherit" is set as color prop. */
        this.theme = 'light';
    }
    TextList.prototype.render = function () {
        var TagType = this.listType === 'unordered' ? 'ul' : 'ol';
        var textListClasses = classnames(prefix('text-list'), prefix("text-list--" + this.listType), prefix("text-list--theme-" + this.theme), this.isNestedList && prefix('text-list--nested'));
        return (h(Host, { nested: this.isNestedList }, h(TagType, { role: 'list', class: textListClasses }, h("slot", null))));
    };
    Object.defineProperty(TextList.prototype, "isNestedList", {
        get: function () {
            return !!this.host.closest(prefix('text-list-item'));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextList.prototype, "host", {
        get: function () { return getElement(this); },
        enumerable: false,
        configurable: true
    });
    return TextList;
}());
TextList.style = textListCss;
export { TextList as p_text_list };
