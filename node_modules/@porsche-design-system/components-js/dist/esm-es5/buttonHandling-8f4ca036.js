var improveButtonHandlingForCustomElement = function (element, getType, getDisabled) {
    element.addEventListener('click', function (event) { return fixEventTarget(event, element); }, true);
    element.addEventListener('click', function (event) { return handleButtonEvent(event, element, getType, getDisabled); });
};
var handleButtonEvent = function (event, element, getType, getDisabled) {
    // Why? That's why: https://www.hjorthhansen.dev/shadow-dom-and-forms/
    var form = element.closest('form');
    var type = getType();
    var disabled = getDisabled();
    if (form && !disabled) {
        /**
         * we've to wait if someone calls preventDefault on the event
         * then we shouldn't submit the form
         */
        window.setTimeout(function () {
            if (!event.defaultPrevented) {
                var fakeButton = document.createElement('button');
                fakeButton.type = type;
                fakeButton.style.display = 'none';
                form.appendChild(fakeButton);
                fakeButton.addEventListener('click', function (fakeButtonEvent) {
                    fakeButtonEvent.stopPropagation();
                });
                fakeButton.click();
                fakeButton.remove();
            }
        }, 1);
    }
};
/**
 * IE11/Edge (not chromium based) workaround to
 * fix the event target of click events (which normally
 * shadow dom takes care of)
 */
var fixEventTarget = function (event, element) {
    if (event.target !== element) {
        event.stopPropagation();
        event.preventDefault();
        element.click();
    }
};
export { handleButtonEvent as h, improveButtonHandlingForCustomElement as i };
