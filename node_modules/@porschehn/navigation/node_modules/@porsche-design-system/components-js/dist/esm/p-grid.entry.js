import { r as registerInstance, h, H as Host } from './index-1d2895d7.js';
import { c as cx, p as prefix, m as mapBreakpointPropToPrefixedClasses } from './index-4c11fe51.js';

const gridCss = ".p-grid{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-left:-0.5rem;margin-right:-0.5rem}@media (min-width: 760px){.p-grid{margin-left:-0.75rem;margin-right:-0.75rem}}@media (min-width: 1000px){.p-grid{margin-left:-1.125rem;margin-right:-1.125rem}}.p-grid--direction-column{-ms-flex-direction:column;flex-direction:column}.p-grid--direction-column-reverse{-ms-flex-direction:column-reverse;flex-direction:column-reverse}.p-grid--direction-row{-ms-flex-direction:row;flex-direction:row}.p-grid--direction-row-reverse{-ms-flex-direction:row-reverse;flex-direction:row-reverse}@media (min-width: 480px){.p-grid--direction-column-xs{-ms-flex-direction:column;flex-direction:column}.p-grid--direction-column-reverse-xs{-ms-flex-direction:column-reverse;flex-direction:column-reverse}.p-grid--direction-row-xs{-ms-flex-direction:row;flex-direction:row}.p-grid--direction-row-reverse-xs{-ms-flex-direction:row-reverse;flex-direction:row-reverse}}@media (min-width: 760px){.p-grid--direction-column-s{-ms-flex-direction:column;flex-direction:column}.p-grid--direction-column-reverse-s{-ms-flex-direction:column-reverse;flex-direction:column-reverse}.p-grid--direction-row-s{-ms-flex-direction:row;flex-direction:row}.p-grid--direction-row-reverse-s{-ms-flex-direction:row-reverse;flex-direction:row-reverse}}@media (min-width: 1000px){.p-grid--direction-column-m{-ms-flex-direction:column;flex-direction:column}.p-grid--direction-column-reverse-m{-ms-flex-direction:column-reverse;flex-direction:column-reverse}.p-grid--direction-row-m{-ms-flex-direction:row;flex-direction:row}.p-grid--direction-row-reverse-m{-ms-flex-direction:row-reverse;flex-direction:row-reverse}}@media (min-width: 1300px){.p-grid--direction-column-l{-ms-flex-direction:column;flex-direction:column}.p-grid--direction-column-reverse-l{-ms-flex-direction:column-reverse;flex-direction:column-reverse}.p-grid--direction-row-l{-ms-flex-direction:row;flex-direction:row}.p-grid--direction-row-reverse-l{-ms-flex-direction:row-reverse;flex-direction:row-reverse}}@media (min-width: 1760px){.p-grid--direction-column-xl{-ms-flex-direction:column;flex-direction:column}.p-grid--direction-column-reverse-xl{-ms-flex-direction:column-reverse;flex-direction:column-reverse}.p-grid--direction-row-xl{-ms-flex-direction:row;flex-direction:row}.p-grid--direction-row-reverse-xl{-ms-flex-direction:row-reverse;flex-direction:row-reverse}}";

const Grid = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /** Defines the direction of the main and cross axis. The default "row" defines the main axis as horizontal left to right. Also defines the direction for specific breakpoints, like {base: "column", l: "row"}. You always need to provide a base value when doing this. */
        this.direction = 'row';
    }
    render() {
        const gridClasses = cx(prefix('grid'), this.direction !== 'row' && mapBreakpointPropToPrefixedClasses('grid--direction', this.direction));
        return h(Host, { class: gridClasses });
    }
};
Grid.style = gridCss;

export { Grid as p_grid };
