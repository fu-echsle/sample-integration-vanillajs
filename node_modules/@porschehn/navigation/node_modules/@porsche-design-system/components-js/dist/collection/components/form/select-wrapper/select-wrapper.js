import { Host, Component, Prop, h, Element, State } from '@stencil/core';
import cx from 'classnames';
import { mapBreakpointPropToPrefixedClasses, prefix, transitionListener, insertSlottedStyles, randomString } from '../../../utils';
export class SelectWrapper {
    constructor() {
        /** The label text. */
        this.label = '';
        /** The validation state. */
        this.state = 'none';
        /** The message styled depending on validation state. */
        this.message = '';
        /** Show or hide label. For better accessibility it is recommended to show the label. */
        this.hideLabel = false;
        this.labelId = randomString();
    }
    componentWillLoad() {
        this.setSelect();
        this.setState();
        this.bindStateListener();
        this.addSlottedStyles();
    }
    render() {
        const labelClasses = cx(prefix('select-wrapper__label'));
        const labelTextClasses = cx(prefix('select-wrapper__label-text'), mapBreakpointPropToPrefixedClasses('select-wrapper__label-text-', this.hideLabel, ['hidden', 'visible']), this.disabled && prefix('select-wrapper__label-text--disabled'));
        const fakeSelectClasses = cx(prefix('select-wrapper__fake-select'), this.disabled && prefix('select-wrapper__fake-select--disabled'), this.state !== 'none' && prefix(`select-wrapper__fake-select--${this.state}`));
        const iconClasses = cx(prefix('select-wrapper__icon'), this.disabled && prefix('select-wrapper__icon--disabled'));
        const messageClasses = cx(prefix('select-wrapper__message'), this.state !== 'none' && prefix(`select-wrapper__message--${this.state}`));
        return (h(Host, null,
            h("label", { class: labelClasses, id: this.state === 'error' && this.labelId },
                this.isLabelVisible &&
                    h("p-text", { class: labelTextClasses, tag: 'span', color: 'inherit', onClick: () => this.labelClick() }, this.label ? this.label : h("span", null,
                        h("slot", { name: 'label' }))),
                h("span", { class: fakeSelectClasses },
                    h("p-icon", { class: iconClasses, name: 'arrow-head-down', color: 'inherit' }),
                    h("slot", null))),
            this.isMessageVisible &&
                h("p-text", { class: messageClasses, color: 'inherit', role: this.state === 'error' && 'alert', "aria-describedby": this.state === 'error' && this.labelId }, this.message ? this.message : h("span", null,
                    h("slot", { name: 'message' })))));
    }
    get isLabelVisible() {
        return !!this.label || !!this.host.querySelector('[slot="label"]');
    }
    get isMessageDefined() {
        return !!this.message || !!this.host.querySelector('[slot="message"]');
    }
    get isMessageVisible() {
        return ['success', 'error'].includes(this.state) && this.isMessageDefined;
    }
    setSelect() {
        this.select = this.host.querySelector('select');
        this.select.setAttribute('aria-label', this.label);
    }
    setState() {
        this.disabled = this.select.disabled;
    }
    labelClick() {
        this.select.focus();
    }
    bindStateListener() {
        transitionListener(this.select, 'border-top-color', () => {
            this.setState();
        });
    }
    addSlottedStyles() {
        const tagName = this.host.tagName.toLowerCase();
        const style = `${tagName} a {
      outline: none transparent;
      color: inherit;
      text-decoration: underline;
      -webkit-transition: outline-color .24s ease, color .24s ease;
      transition: outline-color .24s ease, color .24s ease;
    }
    ${tagName} a:hover {
      color: #d5001c;
    }
    ${tagName} a:focus {
      outline: 2px solid #00d5b9;
      outline-offset: 1px;
    }`;
        insertSlottedStyles(this.host, style);
    }
    static get is() { return "p-select-wrapper"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["select-wrapper.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["select-wrapper.css"]
    }; }
    static get properties() { return {
        "label": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The label text."
            },
            "attribute": "label",
            "reflect": false,
            "defaultValue": "''"
        },
        "state": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "FormState",
                "resolved": "\"error\" | \"none\" | \"success\"",
                "references": {
                    "FormState": {
                        "location": "import",
                        "path": "../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The validation state."
            },
            "attribute": "state",
            "reflect": false,
            "defaultValue": "'none'"
        },
        "message": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The message styled depending on validation state."
            },
            "attribute": "message",
            "reflect": false,
            "defaultValue": "''"
        },
        "hideLabel": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "BreakpointCustomizable<boolean>",
                "resolved": "BreakpointValues<boolean> | boolean | string",
                "references": {
                    "BreakpointCustomizable": {
                        "location": "import",
                        "path": "../../../utils"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Show or hide label. For better accessibility it is recommended to show the label."
            },
            "attribute": "hide-label",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get states() { return {
        "disabled": {}
    }; }
    static get elementRef() { return "host"; }
}
