import { Host, Component, Prop, h, Element, State } from '@stencil/core';
import cx from 'classnames';
import { mapBreakpointPropToPrefixedClasses, prefix, transitionListener, insertSlottedStyles, randomString } from '../../../utils';
export class TextFieldWrapper {
    constructor() {
        /** The label text. */
        this.label = '';
        /** The validation state. */
        this.state = 'none';
        /** The message styled depending on validation state. */
        this.message = '';
        /** Show or hide label. For better accessibility it is recommended to show the label. */
        this.hideLabel = false;
        this.showPassword = false;
        this.labelId = randomString();
    }
    componentWillLoad() {
        this.setInput();
        this.setState();
        this.updatePasswordToggleable();
        this.bindStateListener();
        this.addSlottedStyles();
    }
    render() {
        const containerClasses = cx(prefix('text-field-wrapper__container'));
        const labelClasses = cx(prefix('text-field-wrapper__label'));
        const labelTextClasses = cx(prefix('text-field-wrapper__label-text'), mapBreakpointPropToPrefixedClasses('text-field-wrapper__label-text-', this.hideLabel, ['hidden', 'visible']), this.disabled && prefix('text-field-wrapper__label-text--disabled'));
        const fakeInputClasses = cx(prefix('text-field-wrapper__fake-input'), this.state !== 'none' && prefix(`text-field-wrapper__fake-input--${this.state}`), this.disabled && prefix('text-field-wrapper__fake-input--disabled'), this.readonly && prefix('text-field-wrapper__fake-input--readonly'));
        const buttonClasses = cx(prefix('text-field-wrapper__button'));
        const messageClasses = cx(prefix('text-field-wrapper__message'), this.state !== 'none' && prefix(`text-field-wrapper__message--${this.state}`));
        return (h(Host, null,
            h("span", { class: containerClasses },
                h("label", { class: labelClasses, id: this.state === 'error' && this.labelId },
                    this.isLabelVisible &&
                        h("p-text", { class: labelTextClasses, tag: 'span', color: 'inherit', onClick: () => this.labelClick() }, this.label ? this.label : h("span", null,
                            h("slot", { name: 'label' }))),
                    h("span", { class: fakeInputClasses },
                        h("slot", null))),
                this.isPasswordToggleable &&
                    h("button", { type: 'button', class: buttonClasses, onClick: () => this.togglePassword(), disabled: this.disabled },
                        h("p-icon", { name: this.showPassword ? 'view-off' : 'view', color: 'inherit' }))),
            this.isMessageVisible &&
                h("p-text", { class: messageClasses, color: 'inherit', role: this.state === 'error' && 'alert', "aria-describedby": this.state === 'error' && this.labelId }, this.message ? this.message : h("span", null,
                    h("slot", { name: 'message' })))));
    }
    get isLabelVisible() {
        return !!this.label || !!this.host.querySelector('[slot="label"]');
    }
    get isMessageDefined() {
        return !!this.message || !!this.host.querySelector('[slot="message"]');
    }
    get isMessageVisible() {
        return ['success', 'error'].includes(this.state) && this.isMessageDefined;
    }
    setInput() {
        this.input = this.host.querySelector('input');
        this.input.setAttribute('aria-label', this.label);
    }
    setState() {
        this.disabled = this.input.disabled;
        this.readonly = this.input.readOnly;
    }
    labelClick() {
        this.input.focus();
    }
    bindStateListener() {
        transitionListener(this.input, 'border-top-color', () => {
            this.setState();
        });
    }
    updatePasswordToggleable() {
        this.isPasswordToggleable = this.input.type === 'password';
        if (this.isPasswordToggleable) {
            this.input.style.cssText = 'padding-right: 3rem !important';
        }
    }
    togglePassword() {
        this.input.type === 'password' ? this.input.type = 'text' : this.input.type = 'password';
        this.showPassword = !this.showPassword;
        this.labelClick();
    }
    addSlottedStyles() {
        const tagName = this.host.tagName.toLowerCase();
        const style = `${tagName} a {
      outline: none transparent;
      color: inherit;
      text-decoration: underline;
      -webkit-transition: outline-color .24s ease, color .24s ease;
      transition: outline-color .24s ease, color .24s ease;
    }

    ${tagName} a:hover {
      color: #d5001c;
    }

    ${tagName} a:focus {
      outline: 2px solid #00d5b9;
      outline-offset: 1px;
    }

    ${tagName} input::-webkit-outer-spin-button {
      appearance: none !important;
      -webkit-appearance: none !important;
    }

    ${tagName} input::-webkit-inner-spin-button {
      appearance: none !important;
      -webkit-appearance: none !important;
    }

    ${tagName} input[type=password]::-webkit-contacts-auto-fill-button,
    ${tagName} input[type=password]::-webkit-credentials-auto-fill-button {
      margin-right: 32px;
    }
    `;
        insertSlottedStyles(this.host, style);
    }
    static get is() { return "p-text-field-wrapper"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["text-field-wrapper.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["text-field-wrapper.css"]
    }; }
    static get properties() { return {
        "label": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The label text."
            },
            "attribute": "label",
            "reflect": false,
            "defaultValue": "''"
        },
        "state": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "FormState",
                "resolved": "\"error\" | \"none\" | \"success\"",
                "references": {
                    "FormState": {
                        "location": "import",
                        "path": "../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The validation state."
            },
            "attribute": "state",
            "reflect": false,
            "defaultValue": "'none'"
        },
        "message": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The message styled depending on validation state."
            },
            "attribute": "message",
            "reflect": false,
            "defaultValue": "''"
        },
        "hideLabel": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "BreakpointCustomizable<boolean>",
                "resolved": "BreakpointValues<boolean> | boolean | string",
                "references": {
                    "BreakpointCustomizable": {
                        "location": "import",
                        "path": "../../../utils"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Show or hide label. For better accessibility it is recommended to show the label."
            },
            "attribute": "hide-label",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get states() { return {
        "disabled": {},
        "readonly": {},
        "showPassword": {}
    }; }
    static get elementRef() { return "host"; }
}
