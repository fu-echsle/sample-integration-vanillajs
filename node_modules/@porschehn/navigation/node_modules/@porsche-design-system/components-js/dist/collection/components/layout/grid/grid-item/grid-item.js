import { Component, Host, Prop, h } from '@stencil/core';
import cx from 'classnames';
import { mapBreakpointPropToPrefixedClasses, prefix } from '../../../../utils';
export class GridItem {
    constructor() {
        /** The size of the column. Can be between 1 and 12. Also defines the size of the column for specific breakpoints, like {base: 6, l: 3}. You always need to provide a base value when doing this. */
        this.size = 1;
        /** The offset of the column. Can be between 0 and 11. Also defines the offset of the column for specific breakpoints, like {base: 6, l: 3}. You always need to provide a base value when doing this. */
        this.offset = 0;
    }
    render() {
        const gridItemClasses = cx(prefix('grid-item'), mapBreakpointPropToPrefixedClasses('grid-item--size', this.size), this.offset !== 0 && mapBreakpointPropToPrefixedClasses('grid-item--offset', this.offset));
        return h(Host, { class: gridItemClasses });
    }
    static get is() { return "p-grid-item"; }
    static get originalStyleUrls() { return {
        "$": ["grid-item.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["grid-item.css"]
    }; }
    static get properties() { return {
        "size": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "BreakpointCustomizable<1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12>",
                "resolved": "1 | 10 | 11 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | BreakpointValues<5 | 7 | 1 | 2 | 3 | 4 | 6 | 8 | 9 | 10 | 11 | 12> | string",
                "references": {
                    "BreakpointCustomizable": {
                        "location": "import",
                        "path": "../../../../utils"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The size of the column. Can be between 1 and 12. Also defines the size of the column for specific breakpoints, like {base: 6, l: 3}. You always need to provide a base value when doing this."
            },
            "attribute": "size",
            "reflect": false,
            "defaultValue": "1"
        },
        "offset": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "BreakpointCustomizable<0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11>",
                "resolved": "0 | 1 | 10 | 11 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | BreakpointValues<0 | 5 | 7 | 1 | 2 | 3 | 4 | 6 | 8 | 9 | 10 | 11> | string",
                "references": {
                    "BreakpointCustomizable": {
                        "location": "import",
                        "path": "../../../../utils"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The offset of the column. Can be between 0 and 11. Also defines the offset of the column for specific breakpoints, like {base: 6, l: 3}. You always need to provide a base value when doing this."
            },
            "attribute": "offset",
            "reflect": false,
            "defaultValue": "0"
        }
    }; }
}
