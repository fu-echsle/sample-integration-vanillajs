import { Component, Prop, h, Element } from '@stencil/core';
import cx from 'classnames';
import { prefix } from '../../../../utils';
import { insertSlottedStyles } from '../../../../utils/slotted-styles';
export class Headline {
    constructor() {
        /** Style of the text. */
        this.variant = 'headline-1';
        /** Sets a custom HTML tag depending of the usage of the headline component. */
        this.tag = undefined;
        /** Text alignment of the component. */
        this.align = 'left';
        /** Basic text color variations depending on theme property. */
        this.color = 'default';
        /** Adds an ellipsis to a single line of text if it overflows. */
        this.ellipsis = false;
        /** Adapts the text color depending on the theme. Has no effect when "inherit" is set as color prop. */
        this.theme = 'light';
    }
    componentDidLoad() {
        const tagName = this.element.tagName.toLowerCase();
        const style = `${tagName} a {
      color: inherit;
      text-decoration: none;
    }`;
        insertSlottedStyles(this.element, style);
    }
    render() {
        const TagType = !this.tag ?
            this.variant === 'large-title' && 'h1'
                || this.variant === 'headline-1' && 'h1'
                || this.variant === 'headline-2' && 'h2'
                || this.variant === 'headline-3' && 'h3'
                || this.variant === 'headline-4' && 'h4'
                || this.variant === 'headline-5' && 'h5'
            : this.tag;
        const headlineClasses = cx(prefix('headline'), prefix(`headline--variant-${this.variant}`), prefix(`headline--align-${this.align}`), prefix(`headline--color-${this.color}`), this.ellipsis && prefix('headline--ellipsis'), this.color !== 'inherit' && prefix(`headline--theme-${this.theme}`));
        return (h(TagType, { class: headlineClasses },
            h("slot", null)));
    }
    static get is() { return "p-headline"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["headline.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["headline.css"]
    }; }
    static get properties() { return {
        "variant": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "| 'large-title'\n    | 'headline-1'\n    | 'headline-2'\n    | 'headline-3'\n    | 'headline-4'\n    | 'headline-5'",
                "resolved": "\"headline-1\" | \"headline-2\" | \"headline-3\" | \"headline-4\" | \"headline-5\" | \"large-title\"",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Style of the text."
            },
            "attribute": "variant",
            "reflect": false,
            "defaultValue": "'headline-1'"
        },
        "tag": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'",
                "resolved": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Sets a custom HTML tag depending of the usage of the headline component."
            },
            "attribute": "tag",
            "reflect": false,
            "defaultValue": "undefined"
        },
        "align": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'left' | 'center' | 'right'",
                "resolved": "\"center\" | \"left\" | \"right\"",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Text alignment of the component."
            },
            "attribute": "align",
            "reflect": false,
            "defaultValue": "'left'"
        },
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'default' | 'inherit'",
                "resolved": "\"default\" | \"inherit\"",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Basic text color variations depending on theme property."
            },
            "attribute": "color",
            "reflect": false,
            "defaultValue": "'default'"
        },
        "ellipsis": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Adds an ellipsis to a single line of text if it overflows."
            },
            "attribute": "ellipsis",
            "reflect": false,
            "defaultValue": "false"
        },
        "theme": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "Theme",
                "resolved": "\"dark\" | \"light\"",
                "references": {
                    "Theme": {
                        "location": "import",
                        "path": "../../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Adapts the text color depending on the theme. Has no effect when \"inherit\" is set as color prop."
            },
            "attribute": "theme",
            "reflect": false,
            "defaultValue": "'light'"
        }
    }; }
    static get elementRef() { return "element"; }
}
