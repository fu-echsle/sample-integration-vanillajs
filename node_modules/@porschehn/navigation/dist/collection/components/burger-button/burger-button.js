import { Component, Host, h } from '@stencil/core';
import { navContentStore } from '../../state/nav-content-store';
import { navStateStore } from '../../state/nav-state-store';
import { MoreClickEvent } from '../../services/datalayer/more-click-event';
import { analyticsSetupStore } from '../../state/analytics-setup-store';
import { MENU_PHRASE_ID } from '../../utility/constants';
export class BurgerButton {
    constructor() {
        this.hiddenStyle = { display: 'none' };
        this.sendMoreClickAnalyticsEvent = () => {
            const analyticsSetup = {
                applicationId: analyticsSetupStore.get('applicationId'),
                locale: analyticsSetupStore.get('locale'),
                window: analyticsSetupStore.get('window'),
                environment: analyticsSetupStore.get('environment')
            };
            const menu = navContentStore.get('menu');
            const moreClickEvent = new MoreClickEvent(analyticsSetup, menu[0]);
            const pagData = (window['pagData'] = window['pagData'] || []);
            pagData.push(moreClickEvent.event());
        };
    }
    getText() {
        let text = '';
        const menu = navContentStore.get('menu');
        if (menu && menu.length > 0) {
            const menuItem = menu.find((m) => m.PhraseId === MENU_PHRASE_ID);
            if (menuItem && menuItem.Text) {
                text = menuItem.Text;
            }
        }
        return text;
    }
    render() {
        const hasMenuContent = navContentStore.get('menu').length > 0;
        const hasUnreadMessages = navContentStore.get('unreadMessagesCount') > 0;
        const isDrawerOpen = navStateStore.get('isDrawerOpen');
        return (h(Host, null,
            h("button", { style: navStateStore.get('crestLoaded') ? {} : this.hiddenStyle, class: `burger-button ${isDrawerOpen ? 'hide-button' : ''}`, onClick: hasMenuContent ? this.sendMoreClickAnalyticsEvent : null },
                h("p-text", { size: "inherit", class: "burger-button-text" }, this.getText()),
                h("p-icon", { class: "burger-button-icon", size: "small", name: "menu-lines" }),
                hasUnreadMessages && h("span", { class: "myporsche-unread-messages-indicator" })),
            h("div", { style: navStateStore.get('crestLoaded') ? this.hiddenStyle : {}, class: "burger-button-skeleton" })));
    }
    static get is() { return "phn-burger-button"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() { return {
        "$": ["burger-button.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["burger-button.css"]
    }; }
}
