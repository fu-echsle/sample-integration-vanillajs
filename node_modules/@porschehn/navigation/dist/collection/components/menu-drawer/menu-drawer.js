import { Component, Element, Host, h, Event, Prop, Listen } from '@stencil/core';
import { navContentStore } from '../../state/nav-content-store';
import { MENU_PHRASE_ID, PHRASEID_FIELD_NAME, TEXT_FIELD_NAME } from '../../utility/constants';
import { navStateStore } from '../../state/nav-state-store';
import { MenuDrawerAnimation } from '../../services/menu-drawer-animation';
import { FEATURE_MOBILE_FOCUS } from '../../utility/constants';
import { isFeatureEnabled } from '../../env-config';
export class MenuDrawer {
    constructor() {
        this.isTopmostDrawer = '';
        this.menuDrawerAnimation = new MenuDrawerAnimation();
        this.isFirstDrawer = false;
        this.handleBack = () => {
            this.menuDrawerAnimation.slideOutMenuDrawer(this.mobileLayout, this.el, () => {
                const newStack = navStateStore.get('drawerContentStack');
                newStack.pop();
                navStateStore.set('drawerContentStack', [...newStack]);
            });
        };
        this.close = () => {
            this.closeAllDrawers.emit();
        };
        this.stopClickEvent = (event) => {
            event.stopPropagation();
        };
        this.initFirstAndLastFocusableElements = () => {
            const focusableElements = this.el.querySelectorAll('button, a, phn-p-link-pure, phn-p-link,  phn-p-button-pure, [tabindex]:not([tabindex="-1"])');
            this.firstFocusableElement = focusableElements[0];
            this.lastFocusableElement = focusableElements[focusableElements.length - 1];
        };
    }
    handleKeyDown(ev) {
        if (!ev.shiftKey && ev.key === 'Tab' && ev.target === this.lastFocusableElement) {
            this.firstKeyboardAnchor.focus();
        }
        if (ev.shiftKey && ev.key === 'Tab' && ev.target === this.firstFocusableElement) {
            this.lastKeyboardAnchor.focus();
        }
    }
    getValueForField(fieldName) {
        let text = '';
        const menu = navContentStore.get('menu');
        if (menu && menu.length > 0) {
            const menuItem = menu.find((m) => m.PhraseId === MENU_PHRASE_ID);
            if (menuItem && menuItem[fieldName]) {
                text = menuItem[fieldName];
            }
        }
        return text;
    }
    componentWillLoad() {
        this.isFirstDrawer = navStateStore.get('drawerContentStack').length === 1;
    }
    componentDidLoad() {
        this.initFirstAndLastFocusableElements();
        if (this.isFirstDrawer) {
            this.menuDrawerAnimation.slideInFirstMenuDrawer(this.el, this.menuOverlayOpen.emit);
        }
        else {
            this.menuDrawerAnimation.slideInMenuDrawer(this.mobileLayout, this.el);
        }
        if (this.isTopmostDrawer) {
            isFeatureEnabled(FEATURE_MOBILE_FOCUS)
                ? this.firstFocusableElement.focus()
                : this.firstKeyboardAnchor.focus();
        }
    }
    componentDidUpdate() {
        if (this.isTopmostDrawer) {
            isFeatureEnabled(FEATURE_MOBILE_FOCUS)
                ? this.firstFocusableElement.focus()
                : this.firstKeyboardAnchor.focus();
        }
    }
    render() {
        const backButtonText = this.backButton || this.getValueForField(TEXT_FIELD_NAME);
        const backButtonId = this.getValueForField(PHRASEID_FIELD_NAME);
        const backAndCloseClass = !this.isFirstDrawer ? 'drawer-back-and-close' : 'drawer-back-and-close drawer-close';
        return (h(Host, { class: "drawer-trigger", tabindex: "-1" },
            h("div", { class: "menu-drawer" },
                h("div", { class: "menu-drawer-container", onClick: this.close },
                    h("div", { class: "menu-drawer-content", onClick: this.stopClickEvent },
                        h("div", { class: "menu-drawer-content-wrapper", role: "dialog", "aria-modal": "true" },
                            h("span", { ref: (el) => (this.firstKeyboardAnchor = el), "aria-hidden": "true", tabindex: "-1" }),
                            h("div", { class: backAndCloseClass },
                                !this.isFirstDrawer && (h("phn-back-button", { class: "back-button", onClick: this.handleBack, buttonId: backButtonId, text: backButtonText })),
                                h("phn-p-button-pure", { class: "close-button", icon: "close", hideLabel: "true", "aria-label": "close dialog", size: "small", onClick: this.close }, "Close Dialog")),
                            h("slot", { name: "content" }),
                            h("span", { ref: (el) => (this.lastKeyboardAnchor = el), "aria-hidden": "true", tabindex: "-1" })))))));
    }
    static get is() { return "phn-menu-drawer"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() { return {
        "$": ["menu-drawer.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["menu-drawer.css"]
    }; }
    static get properties() { return {
        "mobileLayout": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "HTMLPhnMobileLayoutElement",
                "resolved": "HTMLPhnMobileLayoutElement",
                "references": {
                    "HTMLPhnMobileLayoutElement": {
                        "location": "global"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "backButton": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "back-button",
            "reflect": false
        },
        "isTopmostDrawer": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "is-topmost-drawer",
            "reflect": false,
            "defaultValue": "''"
        }
    }; }
    static get events() { return [{
            "method": "closeAllDrawers",
            "name": "closeAllDrawers",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "menuOverlayOpen",
            "name": "menuOverlayOpen",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "el"; }
    static get listeners() { return [{
            "name": "keydown",
            "method": "handleKeyDown",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
}
