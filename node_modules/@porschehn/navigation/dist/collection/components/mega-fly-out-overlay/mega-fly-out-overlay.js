import { Component, Host, Method, Prop, State, h, Element } from '@stencil/core';
import { FEATURE_KEYBOARD, FOCUSABLE_ELEMENTS_SELECTOR } from '../../services/constants';
import { isFeatureEnabled } from '../../env-config';
import { navContentStore } from '../../services/nav-content-store';
export class MegaFlyOutOverlay {
    constructor() {
        this.active = '';
        this.setBackdropOffset = () => {
            const offsetFromTop = document.body.querySelector('phn-header').getBoundingClientRect().bottom;
            if (offsetFromTop <= 0) {
                this.backdropElement.style.top = '0';
            }
            else {
                this.backdropElement.style.top = '';
            }
        };
        this.activateOverlay = () => {
            this.active = 'active';
            window.addEventListener('scroll', this.setBackdropOffset);
        };
        this.handleKeyDown = (event) => {
            if (isFeatureEnabled(FEATURE_KEYBOARD, navContentStore.get('env'))) {
                if (event.key === 'Enter') {
                    this.activateOverlay();
                    this.keyboardShowOverlayHandler(this.containerElement);
                }
                if (event.shiftKey && event.key === 'Tab') {
                    this.deactivateState();
                    this.keyboardHideOverlayHandler();
                }
            }
        };
        this.handleKeyDownContainer = (event) => {
            const focusable = this.containerElement.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR);
            const isFirstOverlayElement = event.target === focusable[0];
            if (event.shiftKey && event.key === 'Tab' && isFirstOverlayElement) {
                this.deactivateState();
                this.keyboardHideOverlayHandler();
            }
            const isLastOverlayElement = event.target === focusable[focusable.length - 1];
            if (!event.shiftKey && event.key === 'Tab' && isLastOverlayElement) {
                this.deactivateState();
                this.keyboardHideOverlayHandler();
            }
        };
    }
    async showOverlay() {
        this.activateOverlay();
        this.showOverlayHandler(this.containerElement);
    }
    async deactivateState() {
        window.removeEventListener('scroll', this.setBackdropOffset);
        this.active = '';
        // visibility not set here, as we need to delay it for animations to happen
    }
    async hideOverlay() {
        this.deactivateState();
        this.hideOverlayHandler(this.containerElement);
    }
    render() {
        return (h(Host, null,
            h("div", { class: "mega-fly-out-overlay" },
                h("div", { tabindex: "0", class: 'mega-fly-out-overlay-button mega-fly-out-overlay-button-' + this.active, onKeyDown: this.handleKeyDown },
                    h("slot", { name: "button" })),
                h("div", { class: "mega-fly-out-overlay-container", ref: (el) => (this.containerElement = el), onKeyDown: this.handleKeyDownContainer },
                    h("div", { class: "mega-fly-out-overlay-content" },
                        h("slot", { name: "content" }))),
                this.active && h("div", { class: "backdrop", ref: (el) => (this.backdropElement = el) }))));
    }
    static get is() { return "phn-mega-fly-out-overlay"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() { return {
        "$": ["mega-fly-out-overlay.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["mega-fly-out-overlay.css"]
    }; }
    static get properties() { return {
        "showOverlayHandler": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(overlayElement: HTMLElement) => void",
                "resolved": "(overlayElement: HTMLElement) => void",
                "references": {
                    "HTMLElement": {
                        "location": "global"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "hideOverlayHandler": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(overlayElement: HTMLElement) => void",
                "resolved": "(overlayElement: HTMLElement) => void",
                "references": {
                    "HTMLElement": {
                        "location": "global"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "keyboardShowOverlayHandler": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(overlayElement: HTMLElement) => void",
                "resolved": "(overlayElement: HTMLElement) => void",
                "references": {
                    "HTMLElement": {
                        "location": "global"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "keyboardHideOverlayHandler": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "() => void",
                "resolved": "() => void",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
    static get states() { return {
        "active": {}
    }; }
    static get methods() { return {
        "showOverlay": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        },
        "deactivateState": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        },
        "hideOverlay": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "element"; }
}
