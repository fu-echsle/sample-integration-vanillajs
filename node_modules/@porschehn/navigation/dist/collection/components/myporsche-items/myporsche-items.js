import { Component, Host, Prop, h } from '@stencil/core';
import { MYPORSCHE_PHRASE_ID, FEATURE_KEYBOARD, MAX_M_VIEWPORT_WIDTH } from '../../services/constants';
import { isFeatureEnabled } from '../../env-config';
import { navContentStore } from '../../services/nav-content-store';
export class MyPorscheItems {
    constructor() {
        this.handlePressShiftTabKey = (event) => {
            if (isFeatureEnabled(FEATURE_KEYBOARD, navContentStore.get('env'))) {
                if (window.innerWidth > MAX_M_VIEWPORT_WIDTH && event.shiftKey && event.key === 'Tab') {
                    this.myPorscheCloseHandler();
                }
            }
        };
        this.handlePressTabKey = (event) => {
            if (isFeatureEnabled(FEATURE_KEYBOARD, navContentStore.get('env'))) {
                if (window.innerWidth > MAX_M_VIEWPORT_WIDTH && !event.shiftKey && event.key === 'Tab') {
                    this.myPorscheCloseHandler();
                }
            }
        };
    }
    getMyPorscheItemFromTemplateAsLinkItem(id) {
        const phraseId = `${MYPORSCHE_PHRASE_ID}.${id}`;
        // TODO Add test for Items presence, find failure
        const myPorscheItems = navContentStore.get('metafunctionalities').find((m) => m.PhraseId === MYPORSCHE_PHRASE_ID)
            .Items;
        return myPorscheItems.find((item) => item.PhraseId === phraseId);
    }
    render() {
        return (h(Host, null,
            h("phn-list-item", { class: "myporsche-list-item", item: this.getMyPorscheItemFromTemplateAsLinkItem('carsandservices'), onKeyDown: this.handlePressShiftTabKey }),
            h("phn-messages-link", { class: "myporsche-list-item", item: this.getMyPorscheItemFromTemplateAsLinkItem('messages') }),
            h("phn-list-item", { class: "myporsche-list-item", item: this.getMyPorscheItemFromTemplateAsLinkItem('accountadministration') }),
            h("hr", null),
            h("phn-list-item", { class: "myporsche-list-item logout", item: this.getMyPorscheItemFromTemplateAsLinkItem('logout'), onKeyDown: this.handlePressTabKey })));
    }
    static get is() { return "phn-myporsche-items"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() { return {
        "$": ["myporsche-items.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["myporsche-items.css"]
    }; }
    static get properties() { return {
        "myPorscheCloseHandler": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "() => void",
                "resolved": "() => void",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
}
