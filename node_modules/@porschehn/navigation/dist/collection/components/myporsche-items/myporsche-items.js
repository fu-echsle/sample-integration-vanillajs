import { Component, Prop, h } from '@stencil/core';
import { MYPORSCHE_PHRASE_ID, MAX_M_VIEWPORT_WIDTH, LOGGED_IN_USER_NO_NAME_STATUS, LOGGED_OUT_USER_STATUS } from '../../utility/constants';
import { navContentStore } from '../../state/nav-content-store';
export class MyPorscheItems {
    constructor() {
        this.handlePressShiftTabKey = (event) => {
            if (window.innerWidth > MAX_M_VIEWPORT_WIDTH && event.shiftKey && event.key === 'Tab') {
                this.myPorscheCloseHandler();
            }
        };
        this.handlePressTabKey = (event) => {
            if (window.innerWidth > MAX_M_VIEWPORT_WIDTH && !event.shiftKey && event.key === 'Tab') {
                this.myPorscheCloseHandler();
            }
        };
        this.displayListItems = (item, index) => {
            if (item.PhraseId === `${MYPORSCHE_PHRASE_ID}.messages`) {
                if (index === 0) {
                    return (h("li", null,
                        h("phn-messages-link", { class: "myporsche-list-item", item: item, onKeyDown: this.handlePressShiftTabKey })));
                }
                return (h("li", null,
                    h("phn-messages-link", { class: "myporsche-list-item", item: item })));
            }
            if (index === 0) {
                return (h("li", null,
                    h("phn-list-item", { class: "myporsche-list-item", item: item, onKeyDown: this.handlePressShiftTabKey })));
            }
            return (h("li", null,
                h("phn-list-item", { class: "myporsche-list-item", item: item })));
        };
    }
    getMyPorscheItemFromTemplateAsLinkItem(id) {
        const phraseId = `${MYPORSCHE_PHRASE_ID}.${id}`;
        // TODO Add test for Items presence, find failure
        const myPorscheItems = navContentStore.get('metafunctionalities').find((m) => m.PhraseId === MYPORSCHE_PHRASE_ID)
            .Items;
        return myPorscheItems.find((item) => item.PhraseId === phraseId);
    }
    render() {
        if (navContentStore.get('metafunctionalities').length > 0) {
            const myPorscheItems = navContentStore.get('metafunctionalities').find((m) => m.PhraseId === MYPORSCHE_PHRASE_ID)
                .Items;
            const nonStaticItems = myPorscheItems.filter((item) => item.PhraseId !== `${MYPORSCHE_PHRASE_ID}.${LOGGED_IN_USER_NO_NAME_STATUS}` &&
                item.PhraseId !== `${MYPORSCHE_PHRASE_ID}.${LOGGED_OUT_USER_STATUS}` &&
                item.PhraseId !== `${MYPORSCHE_PHRASE_ID}.logout`);
            return (h("ul", null,
                nonStaticItems.map(this.displayListItems),
                h("hr", { "aria-hidden": "true" }),
                h("li", null,
                    h("phn-list-item", { class: "myporsche-list-item logout", item: this.getMyPorscheItemFromTemplateAsLinkItem('logout'), onKeyDown: this.handlePressTabKey }))));
        }
        return null;
    }
    static get is() { return "phn-myporsche-items"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() { return {
        "$": ["myporsche-items.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["myporsche-items.css"]
    }; }
    static get properties() { return {
        "myPorscheCloseHandler": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "() => void",
                "resolved": "() => void",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
}
