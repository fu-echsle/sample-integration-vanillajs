import { Component, Element, Event, Listen, Prop, State, Watch, h } from '@stencil/core';
import picturefill from 'picturefill';
import { navContentStore } from '../../services/nav-content-store';
import { analyticsSetupStore } from '../../services/datalayer/analytics-setup-store';
import * as contentService from '../../services/content-service';
import * as userService from '../../services/user-service';
import { BodyScrollLock } from '../../services/body-scroll-lock';
import * as silentAuthService from '../../services/silent-auth-service';
import { Locale } from '../entities/locale';
import { GeneralLoadEvent } from '../../services/datalayer/general-load-event';
import { config, isFeatureEnabled } from '../../env-config';
import { FEATURE_KEYBOARD, DEFAULT_ENVIRONMENT, DEFAULT_LOCALE, LOADING_STATUS, LOGGED_OUT_USER_STATUS, REDACTED, VERSION, FEATURE_SKIPCONTENT, FEATURE_UNREAD_MESSAGES_COUNT, FEATURE_DRAWER_RESTRUCTURE } from '../../services/constants';
export class Header {
    constructor() {
        this.localeObject = new Locale(DEFAULT_LOCALE);
        this.locale = DEFAULT_LOCALE;
        this.env = DEFAULT_ENVIRONMENT;
        this.keyDownHandler = (event) => {
            if (isFeatureEnabled(FEATURE_KEYBOARD, this.env)) {
                if (event.key === 'Enter') {
                    this.menuDrawerLevel1.show();
                }
            }
        };
        this.skipToMainContent = (event) => {
            if (this.skipContentEnabled) {
                if (event.key === 'Enter') {
                    const mainElement = this.el.shadowRoot.querySelector('#main');
                    mainElement.tabIndex = 0;
                    mainElement.focus();
                }
            }
        };
        this.mainContentTab = () => {
            if (this.skipContentEnabled) {
                const mainElement = this.el.shadowRoot.querySelector('#main');
                mainElement.tabIndex = -1;
            }
        };
        this.addFocus = () => {
            const skipContentElement = this.el.shadowRoot.querySelector('p-button.skip-content');
            skipContentElement.classList.add('focused');
            const crestElement = this.el.shadowRoot.querySelector('phn-crest');
            skipContentElement.style.left = `${crestElement.getBoundingClientRect().right + 4}px`;
        };
        this.removeFocus = () => {
            const skipContentElement = this.el.shadowRoot.querySelector('p-button.skip-content');
            skipContentElement.classList.remove('focused');
        };
    }
    localeWatchHandler(newLocale) {
        this.localeObject.setLocale(newLocale);
        analyticsSetupStore.set('locale', new Locale(newLocale));
    }
    newAccessTokenReceived(newAccessToken, _) {
        if (newAccessToken !== REDACTED && newAccessToken !== this.accessTokenState) {
            this.accessTokenState = newAccessToken;
        }
        this.el.setAttribute('access-token', REDACTED);
    }
    accessTokenStateUpdated(newToken, oldToken) {
        if (newToken) {
            if (newToken !== oldToken) {
                userService.updateLoggedInStatus(newToken, this.localeObject).then((statusUpdated) => {
                    if (!statusUpdated) {
                        this.accessTokenState = undefined;
                        this.accessTokenExpired.emit();
                    }
                    else {
                        if (isFeatureEnabled(FEATURE_UNREAD_MESSAGES_COUNT, navContentStore.get('env'))) {
                            userService.updateUnreadMessagesCount(newToken);
                        }
                    }
                });
            }
        }
        else {
            navContentStore.set('loggedInState', LOGGED_OUT_USER_STATUS);
        }
    }
    handleAccessTokenFetchedEvent(event) {
        if (event.detail.accessToken) {
            this.accessTokenState = event.detail.accessToken;
        }
        else {
            navContentStore.set('loggedInState', LOGGED_OUT_USER_STATUS);
        }
    }
    handleAccessTokenFetchErrorEvent() {
        navContentStore.set('loggedInState', LOGGED_OUT_USER_STATUS);
    }
    handleMenuOverlayOpen() {
        this.bodyScrollLock.activate();
    }
    handleMenuOverlayClose() {
        this.bodyScrollLock.deactivate();
    }
    async componentWillLoad() {
        analyticsSetupStore.set('window', window);
        analyticsSetupStore.set('environment', this.env);
        navContentStore.set('env', this.env);
        this.bodyScrollLock = new BodyScrollLock();
        this.localeWatchHandler(this.locale);
        this.skipContentEnabled = isFeatureEnabled(FEATURE_SKIPCONTENT, navContentStore.get('env'));
        this.drawerRestructureEnabled = isFeatureEnabled(FEATURE_DRAWER_RESTRUCTURE, navContentStore.get('env'));
        this.content = await contentService.fetchContent(this.env);
        const contentForLocale = contentService.getContentForLocale(this.localeObject, this.content, this.env);
        if (this.accessToken) {
            if (this.accessToken !== REDACTED) {
                this.accessTokenState = this.accessToken;
                this.el.setAttribute('access-token', REDACTED);
            }
        }
        else if (config(this.env).PORSCHE_COM_URL.includes(window.location.origin)) {
            navContentStore.set('loggedInState', LOADING_STATUS);
            await silentAuthService.emitAccessToken(this.el, this.env)();
        }
        else {
            navContentStore.set('loggedInState', LOGGED_OUT_USER_STATUS);
        }
        navContentStore.set('seriesList', contentForLocale.seriesList);
        navContentStore.set('shops', contentForLocale.shops);
        navContentStore.set('more', contentForLocale.more);
        navContentStore.set('metafunctionalities', contentForLocale.metafunctionalities);
        navContentStore.set('menu', contentForLocale.menu);
    }
    async componentDidLoad() {
        const analyticsSetup = {
            applicationId: analyticsSetupStore.get('applicationId'),
            locale: analyticsSetupStore.get('locale'),
            window: analyticsSetupStore.get('window'),
            environment: analyticsSetupStore.get('environment')
        };
        const generalLoadEvent = new GeneralLoadEvent(analyticsSetup);
        const pagData = (window['pagData'] = window['pagData'] || []);
        pagData.push(generalLoadEvent.event());
        // Solution for IE11 not loading right image sizes on document load
        picturefill();
        this.navigationDidLoad.emit();
    }
    componentWillUpdate() {
        const contentForLocale = contentService.getContentForLocale(this.localeObject, this.content, this.env);
        navContentStore.set('seriesList', contentForLocale.seriesList);
        navContentStore.set('shops', contentForLocale.shops);
        navContentStore.set('more', contentForLocale.more);
        navContentStore.set('metafunctionalities', contentForLocale.metafunctionalities);
        navContentStore.set('menu', contentForLocale.menu);
    }
    render() {
        return (h("div", { class: "header-container" },
            this.skipContentEnabled && (h("p-button", { variant: "primary", class: "skip-content", onfocus: this.addFocus, onKeyDown: this.skipToMainContent, onblur: this.removeFocus }, "Skip to main content")),
            h("div", { class: "header limit-stretch" },
                h("div", { class: "crest-burger-btn-container" },
                    h("phn-crest", { class: "crest" }),
                    this.drawerRestructureEnabled ? (h("phn-mobile-layout", null)) : (h("phn-burger-button", { tabindex: "0", class: "burger-button", onClick: () => this.menuDrawerLevel1.show(), onKeyDown: this.keyDownHandler }))),
                h("div", { class: "menu-container" },
                    h("phn-menu-desktop-level-1", { class: "menu-desktop-level-1" })),
                !this.drawerRestructureEnabled && (h("phn-menu-drawer-level-1", { ref: (el) => (this.menuDrawerLevel1 = el) }))),
            h("div", { class: "header-border" }),
            this.env === 'preview' && h("phn-preview-badge", { versionString: `Header ${VERSION} - PP content` }),
            h("div", { id: "main", tabindex: "-1", class: "main-content", onBlur: this.mainContentTab })));
    }
    static get is() { return "phn-header"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["header.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["header.css"]
    }; }
    static get assetsDirs() { return ["auth"]; }
    static get properties() { return {
        "accessToken": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "access-token",
            "reflect": false
        },
        "locale": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "locale",
            "reflect": false,
            "defaultValue": "DEFAULT_LOCALE"
        },
        "env": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "env",
            "reflect": false,
            "defaultValue": "DEFAULT_ENVIRONMENT"
        }
    }; }
    static get states() { return {
        "accessTokenState": {}
    }; }
    static get events() { return [{
            "method": "accessTokenExpired",
            "name": "accessTokenExpired",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "navigationDidLoad",
            "name": "navigationDidLoad",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "locale",
            "methodName": "localeWatchHandler"
        }, {
            "propName": "accessToken",
            "methodName": "newAccessTokenReceived"
        }, {
            "propName": "accessTokenState",
            "methodName": "accessTokenStateUpdated"
        }]; }
    static get listeners() { return [{
            "name": "accessTokenFetched",
            "method": "handleAccessTokenFetchedEvent",
            "target": undefined,
            "capture": false,
            "passive": false
        }, {
            "name": "accessTokenFetchError",
            "method": "handleAccessTokenFetchErrorEvent",
            "target": undefined,
            "capture": false,
            "passive": false
        }, {
            "name": "menuOverlayOpen",
            "method": "handleMenuOverlayOpen",
            "target": undefined,
            "capture": false,
            "passive": false
        }, {
            "name": "menuOverlayClose",
            "method": "handleMenuOverlayClose",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
}
