import { Component, Element, Event, Listen, Prop, State, Watch, h } from '@stencil/core';
import picturefill from 'picturefill';
import * as Logger from '../../services/logger';
import StateTunnel from '../../services/state-tunnel';
import { analyticsSetupStore } from '../../services/datalayer/analytics-setup-store';
import * as contentService from '../../services/content-service';
import * as silentAuthService from '../../services/silent-auth-service';
import { Locale } from '../entities/locale';
import { GeneralLoadEvent } from '../../services/datalayer/general-load-event';
import { config, isFeatureEnabled } from '../../env-config';
import { DEFAULT_ENVIRONMENT, DEFAULT_LOCALE, FEATURE_FEATURE1, LOADING_STATUS, LOGGED_IN_USER_NO_NAME_STATUS, LOGGED_OUT_USER_STATUS, REDACTED, VERSION } from '../../services/constants';
export class Header {
    constructor() {
        this.localeObject = new Locale(DEFAULT_LOCALE);
        this.locale = DEFAULT_LOCALE;
        this.env = DEFAULT_ENVIRONMENT;
    }
    async updateLoggedInStatus(newToken) {
        if (this.loggedInState !== LOADING_STATUS) {
            this.loggedInState = LOADING_STATUS;
        }
        const userLoggedInStatus = await contentService.getLoggedInStatus(newToken, this.localeObject, LOGGED_IN_USER_NO_NAME_STATUS, this.env);
        if (!userLoggedInStatus) {
            this.accessTokenState = undefined;
            this.accessTokenExpired.emit();
            this.loggedInState = LOGGED_OUT_USER_STATUS;
        }
        else {
            this.loggedInState = userLoggedInStatus;
            Logger.debugLogRequest('token_update', 'User data response captured successfully!', this.env);
        }
    }
    setScrollbarWidth() {
        const scrollDiv = document.createElement('div');
        scrollDiv.style.width = '100px';
        scrollDiv.style.height = '100px';
        scrollDiv.style.overflow = 'scroll';
        scrollDiv.style.position = 'absolute';
        scrollDiv.style.top = '-9999px';
        document.body.appendChild(scrollDiv);
        this.scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
    }
    initBodyPaddingRight() {
        const body = document.getElementsByTagName('body')[0];
        const paddingRight = window.getComputedStyle(body, null).getPropertyValue('padding-right');
        this.initialBodyPaddingRightValue = parseFloat(paddingRight);
        this.initialBodyPaddingRightUnit = paddingRight.split(this.initialBodyPaddingRightValue.toString())[1];
    }
    async componentWillLoad() {
        this.isFeature1Enabled = isFeatureEnabled(FEATURE_FEATURE1, this.env);
        analyticsSetupStore.set('window', window);
        this.setScrollbarWidth();
        this.localeWatchHandler(this.locale);
        this.content = await contentService.fetchContent(this.env);
        const contentForLocale = contentService.getContentForLocale(this.localeObject, this.content, this.env);
        if (this.accessToken) {
            if (this.accessToken !== REDACTED) {
                this.accessTokenState = this.accessToken;
                this.el.setAttribute('access-token', REDACTED);
            }
        }
        else if (config(this.env).PORSCHE_COM_URL.includes(window.location.origin)) {
            this.loggedInState = LOADING_STATUS;
            await silentAuthService.emitAccessToken(this.el, this.env)();
        }
        else {
            this.loggedInState = LOGGED_OUT_USER_STATUS;
        }
        this.appData = Object.assign(Object.assign({}, contentForLocale), { env: this.env, loggedInState: this.loggedInState });
    }
    async componentDidLoad() {
        const analyticsSetup = {
            applicationId: analyticsSetupStore.get('applicationId'),
            locale: analyticsSetupStore.get('locale'),
            window: analyticsSetupStore.get('window')
        };
        const generalLoadEvent = new GeneralLoadEvent(analyticsSetup);
        const pagData = (window['pagData'] = window['pagData'] || []);
        pagData.push(generalLoadEvent.event());
        // Solution for IE11 not loading right image sizes on document load
        picturefill();
        this.navigationDidLoad.emit();
    }
    componentWillUpdate() {
        const contentForLocale = contentService.getContentForLocale(this.localeObject, this.content, this.env);
        this.appData = Object.assign(Object.assign({}, contentForLocale), { env: this.env, loggedInState: this.loggedInState });
    }
    localeWatchHandler(newLocale) {
        this.localeObject.setLocale(newLocale);
        analyticsSetupStore.set('locale', new Locale(newLocale));
    }
    newAccessTokenReceived(newAccessToken, _) {
        if (newAccessToken !== REDACTED && newAccessToken !== this.accessTokenState) {
            this.accessTokenState = newAccessToken;
        }
        this.el.setAttribute('access-token', REDACTED);
    }
    accessTokenStateUpdated(newToken, oldToken) {
        if (newToken) {
            if (newToken !== oldToken) {
                this.updateLoggedInStatus(newToken);
            }
        }
        else {
            this.loggedInState = LOGGED_OUT_USER_STATUS;
        }
    }
    handleAccessTokenFetchedEvent(event) {
        this.accessTokenState = event.detail.accessToken;
    }
    handleAccessTokenFetchErrorEvent() {
        this.loggedInState = LOGGED_OUT_USER_STATUS;
    }
    handleMenuOverlayOpen() {
        this.initialBodyOverflow = document.body.style.overflow;
        this.initBodyPaddingRight();
        document.body.style.overflow = 'hidden';
        document.body.style.paddingRight = `${this.initialBodyPaddingRightValue + this.scrollbarWidth}${this.initialBodyPaddingRightUnit}`;
    }
    handleMenuOverlayClose() {
        document.body.style.overflow = this.initialBodyOverflow;
        document.body.style.paddingRight = `${this.initialBodyPaddingRightValue}${this.initialBodyPaddingRightUnit}`;
    }
    render() {
        let menuDrawerLevel1;
        return (h("div", { class: "header-container" },
            h("div", { class: "header limit-stretch" },
                h("div", { class: "crest-burger-btn-container" },
                    h("phn-crest", { class: "crest" }),
                    h("phn-burger-button", { class: "burger-button", onClick: () => menuDrawerLevel1.show() })),
                h(StateTunnel.Provider, { state: this.appData },
                    h("div", { class: "menu-container" },
                        h("phn-menu-desktop-level-1", { class: "menu-desktop-level-1" })),
                    h("phn-menu-drawer-level-1", { ref: (el) => (menuDrawerLevel1 = el) }))),
            h("div", { class: "header-border" }),
            this.env === 'preview' && h("phn-preview-badge", { versionString: `Header ${VERSION} - PP content` }),
            this.isFeature1Enabled && (h("div", null,
                h("br", null),
                h("br", null),
                "Booyah!!! Enabled feature 1!!!"))));
    }
    static get is() { return "phn-header"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["header.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["header.css"]
    }; }
    static get assetsDirs() { return ["auth"]; }
    static get properties() { return {
        "accessToken": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "access-token",
            "reflect": false
        },
        "locale": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "locale",
            "reflect": false,
            "defaultValue": "DEFAULT_LOCALE"
        },
        "env": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "env",
            "reflect": false,
            "defaultValue": "DEFAULT_ENVIRONMENT"
        }
    }; }
    static get states() { return {
        "appData": {},
        "accessTokenState": {},
        "loggedInState": {}
    }; }
    static get events() { return [{
            "method": "accessTokenExpired",
            "name": "accessTokenExpired",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "navigationDidLoad",
            "name": "navigationDidLoad",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "locale",
            "methodName": "localeWatchHandler"
        }, {
            "propName": "accessToken",
            "methodName": "newAccessTokenReceived"
        }, {
            "propName": "accessTokenState",
            "methodName": "accessTokenStateUpdated"
        }]; }
    static get listeners() { return [{
            "name": "accessTokenFetched",
            "method": "handleAccessTokenFetchedEvent",
            "target": undefined,
            "capture": false,
            "passive": false
        }, {
            "name": "accessTokenFetchError",
            "method": "handleAccessTokenFetchErrorEvent",
            "target": undefined,
            "capture": false,
            "passive": false
        }, {
            "name": "menuOverlayOpen",
            "method": "handleMenuOverlayOpen",
            "target": undefined,
            "capture": false,
            "passive": false
        }, {
            "name": "menuOverlayClose",
            "method": "handleMenuOverlayClose",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
}
