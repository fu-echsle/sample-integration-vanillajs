import { Component, Host, Prop, h, Element } from '@stencil/core';
import { LOADING_STATUS, LOGGED_OUT_USER_STATUS, MYPORSCHE_PHRASE_ID } from '../../utility/constants';
import { navContentStore } from '../../state/nav-content-store';
import { navStateStore } from '../../state/nav-state-store';
export class Myporsche {
    constructor() {
        this.myporscheLink = '';
        this.myporscheText = '';
        this.loggedInStatusTranslations = {};
        this.hiddenStyle = { display: 'none' };
        this.renderMyPorsche = (loggedInState) => {
            if (loggedInState === LOGGED_OUT_USER_STATUS) {
                return this.renderLoggedOutComponent();
            }
            if (loggedInState === LOADING_STATUS) {
                return this.renderLoadingComponent();
            }
            return this.renderLoggedInComponent();
        };
    }
    getSubTextForUser() {
        const loggedInState = navContentStore.get('loggedInState');
        const phraseId = `${MYPORSCHE_PHRASE_ID}.${loggedInState}`;
        return this.loggedInStatusTranslations[phraseId] || loggedInState;
    }
    renderLoggedOutComponent() {
        return (h("p-link-pure", { style: navStateStore.get('navigationLoaded') ? {} : this.hiddenStyle, class: "myporsche-logged-out", href: this.myporscheLink, onClick: () => {
                const linkItem = {
                    PhraseId: MYPORSCHE_PHRASE_ID,
                    Text: this.myporscheText,
                    Link: this.myporscheLink
                };
                this.sendMetaFunctionClickAnalyticsEvent(linkItem);
            }, size: "inherit", icon: "user" },
            this.myporscheText,
            h("p-text", { class: "login-status", color: "inherit", size: "inherit", ellipsis: "true", align: "left" }, this.getSubTextForUser())));
    }
    renderLoadingComponent() {
        return (h("p-button-pure", { class: "myporsche-loading", loading: "true", size: "inherit", style: navStateStore.get('navigationLoaded') ? {} : this.hiddenStyle }, this.myporscheText));
    }
    renderLoggedInComponent() {
        const unreadMessagesCount = navContentStore.get('unreadMessagesCount');
        return [
            h("phn-myporsche-drawer", { class: "myporsche-logged-in", myPorscheText: this.myporscheText, loginStatus: this.getSubTextForUser(), unreadMessagesCount: unreadMessagesCount }),
            h("phn-myporsche-flyout", { style: navStateStore.get('navigationLoaded') ? {} : this.hiddenStyle, class: "myporsche-flyout", myPorscheText: this.myporscheText, loginStatus: this.getSubTextForUser(), unreadMessagesCount: unreadMessagesCount })
        ];
    }
    render() {
        const loggedInState = navContentStore.get('loggedInState');
        const hiddenStyle = { display: 'none' };
        return (h(Host, { class: "myporsche" },
            this.renderMyPorsche(loggedInState),
            h("div", { class: "myporsche-skeleton", style: navStateStore.get('navigationLoaded') ? hiddenStyle : {} })));
    }
    static get is() { return "phn-myporsche"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() { return {
        "$": ["myporsche.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["myporsche.css"]
    }; }
    static get properties() { return {
        "myporscheLink": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "myporsche-link",
            "reflect": false,
            "defaultValue": "''"
        },
        "myporscheText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "myporsche-text",
            "reflect": false,
            "defaultValue": "''"
        },
        "sendMetaFunctionClickAnalyticsEvent": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(linkItem: ContentItem) => void",
                "resolved": "(linkItem: ContentItem) => void",
                "references": {
                    "ContentItem": {
                        "location": "import",
                        "path": "../../entities/item"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "loggedInStatusTranslations": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "{}",
                "resolved": "{}",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "defaultValue": "{}"
        },
        "closeActiveDrawer": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(level: number) => void",
                "resolved": "(level: number) => void",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "setActiveDrawer": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(element: HTMLElement, level: number) => void",
                "resolved": "(element: HTMLElement, level: number) => void",
                "references": {
                    "HTMLElement": {
                        "location": "global"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
    static get elementRef() { return "el"; }
}
