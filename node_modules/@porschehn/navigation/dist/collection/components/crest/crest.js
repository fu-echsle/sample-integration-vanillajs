import { Component, h, Host, Element } from '@stencil/core';
import { CrestClickEvent } from '../../services/datalayer/crest-click-event';
import { analyticsSetupStore } from '../../state/analytics-setup-store';
import { CREST_PHRASE_ID } from '../../utility/constants';
import { navContentStore } from '../../state/nav-content-store';
import { navStateStore } from '../../state/nav-state-store';
export class Crest {
    getCrestLink() {
        const crestItem = navContentStore.get('menu').find((m) => m.PhraseId === CREST_PHRASE_ID);
        return crestItem ? (crestItem.Link ? crestItem.Link : '/') : '/';
    }
    sendCrestClickAnalyticsEvent() {
        const analyticsSetup = {
            applicationId: analyticsSetupStore.get('applicationId'),
            locale: analyticsSetupStore.get('locale'),
            window: analyticsSetupStore.get('window'),
            environment: analyticsSetupStore.get('environment')
        };
        const crestClickEvent = new CrestClickEvent(analyticsSetup);
        const pagData = (window['pagData'] = window['pagData'] || []);
        pagData.push(crestClickEvent.event());
    }
    contentLoaded() {
        if (window.matchMedia('(min-width: 1300px)').matches) {
            return navStateStore.get('navigationLoaded');
        }
        else {
            return navStateStore.get('crestLoaded');
        }
    }
    extractImageFromMarque() {
        return this.el.querySelector('.crest phn-p-marque').shadowRoot.querySelector('picture img');
    }
    componentDidLoad() {
        this.extractImageFromMarque().addEventListener('load', () => {
            navStateStore.set('crestLoaded', true);
        });
    }
    render() {
        const hiddenStyle = { display: 'none' };
        return (h(Host, null,
            h("a", { class: "crest", style: this.contentLoaded() ? {} : hiddenStyle, onClick: () => this.sendCrestClickAnalyticsEvent(), href: this.getCrestLink() },
                h("phn-p-marque", { class: "marque" })),
            h("div", { class: "marque-bone", style: this.contentLoaded() ? hiddenStyle : {} },
                h("span", { class: "crest-bone" }),
                h("span", { class: "label-bone" }))));
    }
    static get is() { return "phn-crest"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() { return {
        "$": ["crest.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["crest.css"]
    }; }
    static get elementRef() { return "el"; }
}
