import { Component, Element, Prop, h } from '@stencil/core';
import StateTunnel from '../../services/state-tunnel';
import { MetaFunctionClick } from '../../services/datalayer/meta-function-click';
import { DEALER_SEARCH_PHRASE_ID, LINK_FIELD_NAME, MYPORSCHE_PHRASE_ID, TEXT_FIELD_NAME } from '../../services/constants';
import { analyticsSetupStore } from '../../services/datalayer/analytics-setup-store';
export class MetaFunctionalities {
    constructor() {
        this.metafunctionalities = [];
        this.sendMetaFunctionClickAnalyticsEvent = (linkItem) => {
            const analyticsSetup = {
                applicationId: analyticsSetupStore.get('applicationId'),
                locale: analyticsSetupStore.get('locale'),
                window: analyticsSetupStore.get('window')
            };
            const metaFunctionClick = new MetaFunctionClick(analyticsSetup, linkItem);
            const pagData = (window['pagData'] = window['pagData'] || []);
            pagData.push(metaFunctionClick.event());
        };
    }
    getFieldValueForPhraseId(phraseId, fieldName) {
        const functionality = this.metafunctionalities.find((meta) => meta.PhraseId === phraseId);
        if (!functionality) {
            return '';
        }
        return functionality[fieldName] ? functionality[fieldName] : '';
    }
    getLoggedInStatusTranslations() {
        const functionality = this.metafunctionalities.find((meta) => meta.PhraseId === MYPORSCHE_PHRASE_ID);
        const loggedInStatusTranslations = {};
        if (functionality && functionality.Items) {
            functionality.Items.forEach((meta) => {
                loggedInStatusTranslations[meta.Id] = meta[TEXT_FIELD_NAME];
            });
        }
        return loggedInStatusTranslations;
    }
    render() {
        return (h("div", { class: "metafunctionalities" },
            h("phn-dealer-search", { dealerSearchText: this.getFieldValueForPhraseId(DEALER_SEARCH_PHRASE_ID, TEXT_FIELD_NAME), dealerSearchLink: this.getFieldValueForPhraseId(DEALER_SEARCH_PHRASE_ID, LINK_FIELD_NAME), sendMetaFunctionClickAnalyticsEvent: this.sendMetaFunctionClickAnalyticsEvent }),
            h("phn-myporsche", { myporscheText: this.getFieldValueForPhraseId(MYPORSCHE_PHRASE_ID, TEXT_FIELD_NAME), myporscheLink: this.getFieldValueForPhraseId(MYPORSCHE_PHRASE_ID, LINK_FIELD_NAME), loggedInStatusTranslations: this.getLoggedInStatusTranslations(), sendMetaFunctionClickAnalyticsEvent: this.sendMetaFunctionClickAnalyticsEvent, setActiveDrawer: this.setActiveDrawer, closeActiveDrawer: this.closeActiveDrawer })));
    }
    static get is() { return "phn-meta-functionalities"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() { return {
        "$": ["meta-functionalities.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["meta-functionalities.css"]
    }; }
    static get properties() { return {
        "metafunctionalities": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "ContentItemWithItems[]",
                "resolved": "ContentItemWithItems[]",
                "references": {
                    "ContentItemWithItems": {
                        "location": "import",
                        "path": "../../services/state-tunnel"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "defaultValue": "[]"
        },
        "closeActiveDrawer": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(level: number) => void",
                "resolved": "(level: number) => void",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "setActiveDrawer": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(element: HTMLElement, level: number) => void",
                "resolved": "(element: HTMLElement, level: number) => void",
                "references": {
                    "HTMLElement": {
                        "location": "global"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
    static get elementRef() { return "hostElement"; }
}
StateTunnel.injectProps(MetaFunctionalities, ['metafunctionalities']);
