import { Component, Prop, h, Host } from '@stencil/core';
import { NavigationClickEvent } from '../../services/datalayer/navigation-click-event';
import { EMPTY_ITEM } from '../../utility/constants';
import { analyticsSetupStore } from '../../state/analytics-setup-store';
export class ListItem {
    constructor() {
        this.item = EMPTY_ITEM;
        this.sendNavigationClickAnalyticsEvent = (item) => {
            const contentItem = { PhraseId: item.PhraseId, Text: item.Text, Link: item.Link };
            const analyticsSetup = {
                applicationId: analyticsSetupStore.get('applicationId'),
                locale: analyticsSetupStore.get('locale'),
                window: analyticsSetupStore.get('window'),
                environment: analyticsSetupStore.get('environment')
            };
            const navigationClick = new NavigationClickEvent(analyticsSetup, contentItem);
            const pagData = (window['pagData'] = window['pagData'] || []);
            pagData.push(navigationClick.event());
        };
    }
    renderLinkItem(linkItem) {
        return (h(Host, null,
            h("p-text", { class: "list-item-link", tag: "div", color: "inherit", size: "inherit" },
                h("a", { href: linkItem.Link, onClick: () => this.sendNavigationClickAnalyticsEvent(linkItem) }, linkItem.Text))));
    }
    renderTextItem(textItem) {
        return (h("phn-button-extended", { class: "list-item-button", icon: "arrow-head-right", onClick: () => this.sendNavigationClickAnalyticsEvent(textItem), cancelTabIndex: false },
            h("span", { class: "list-item-text" }, textItem.Text)));
    }
    render() {
        return this.item.Link ? this.renderLinkItem(this.item) : this.renderTextItem(this.item);
    }
    static get is() { return "phn-list-item"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() { return {
        "$": ["list-item.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["list-item.css"]
    }; }
    static get properties() { return {
        "item": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "ContentItem",
                "resolved": "ContentItem",
                "references": {
                    "ContentItem": {
                        "location": "import",
                        "path": "../../entities/item"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "defaultValue": "EMPTY_ITEM"
        }
    }; }
}
