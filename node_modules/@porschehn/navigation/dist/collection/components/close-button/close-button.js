import { Component, Event, h, Prop, Host } from '@stencil/core';
import { DEFAULT_ENVIRONMENT, FEATURE_KEYBOARD } from '../../services/constants';
import { isFeatureEnabled } from '../../env-config';
export class CloseButton {
    constructor() {
        this.env = DEFAULT_ENVIRONMENT;
        this.closeEventfun = (e) => {
            this.closeEvent.emit(e);
        };
        this.handlePressEnterKey = (event) => {
            if (isFeatureEnabled(FEATURE_KEYBOARD, this.env)) {
                if (event.key === 'Enter') {
                    this.closeEventfun(event);
                }
            }
        };
    }
    render() {
        return (h(Host, { class: "close-button-wrapper", tabindex: "0", onClick: this.closeEventfun, onKeyDown: this.handlePressEnterKey },
            h("p-icon", { class: "close-button close-button-icon", name: "close", size: "small" })));
    }
    static get is() { return "phn-close-button"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() { return {
        "$": ["close-button.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["close-button.css"]
    }; }
    static get properties() { return {
        "env": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "env",
            "reflect": false,
            "defaultValue": "DEFAULT_ENVIRONMENT"
        }
    }; }
    static get events() { return [{
            "method": "closeEvent",
            "name": "closeEvent",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
}
