import { Component, Host, Listen, Prop, State, h } from '@stencil/core';
import { DEFAULT_ENVIRONMENT, FEATURE_KEYBOARD } from '../../services/constants';
import { isFeatureEnabled } from '../../env-config';
export class MyPorscheFlyout {
    constructor() {
        this.env = DEFAULT_ENVIRONMENT;
        this.isActive = false;
    }
    myPorscheCloseHandler() {
        this.isActive = false;
    }
    mouseEnterHandler() {
        this.isActive = true;
    }
    mouseLeaveHandler() {
        this.isActive = false;
    }
    keyDownHandler(event) {
        if (isFeatureEnabled(FEATURE_KEYBOARD, this.env)) {
            if (event.key === 'Enter') {
                this.isActive = true;
            }
        }
    }
    render() {
        return (h(Host, { tabindex: "0" },
            h("p-link-pure", { class: "flyout-trigger", size: "inherit", icon: "user", active: this.isActive },
                this.myPorscheText,
                h("p-text", { class: "login-status", color: "inherit", size: "inherit", ellipsis: "true", align: "left" }, this.loginStatus)),
            this.isActive ? (h("div", { class: "myporsche-items" },
                h("phn-myporsche-items", { myPorscheCloseHandler: () => this.myPorscheCloseHandler() }))) : null));
    }
    static get is() { return "phn-myporsche-flyout"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() { return {
        "$": ["myporsche-flyout.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["myporsche-flyout.css"]
    }; }
    static get properties() { return {
        "myPorscheText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "my-porsche-text",
            "reflect": false
        },
        "loginStatus": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "login-status",
            "reflect": false
        },
        "env": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "env",
            "reflect": false,
            "defaultValue": "DEFAULT_ENVIRONMENT"
        }
    }; }
    static get states() { return {
        "isActive": {}
    }; }
    static get listeners() { return [{
            "name": "mouseenter",
            "method": "mouseEnterHandler",
            "target": undefined,
            "capture": false,
            "passive": true
        }, {
            "name": "mouseleave",
            "method": "mouseLeaveHandler",
            "target": undefined,
            "capture": false,
            "passive": true
        }, {
            "name": "keydown",
            "method": "keyDownHandler",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
}
