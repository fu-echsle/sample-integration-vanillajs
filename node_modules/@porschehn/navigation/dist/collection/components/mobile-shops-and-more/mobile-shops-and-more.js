import { Component, Host, Prop, h } from '@stencil/core';
import { DEFAULT_ENVIRONMENT, FEATURE_KEYBOARD } from '../../services/constants';
import { isFeatureEnabled } from '../../env-config';
import { NavigationClickEvent } from '../../services/datalayer/navigation-click-event';
import { analyticsSetupStore } from '../../services/datalayer/analytics-setup-store';
import { navContentStore } from '../../services/nav-content-store';
export class MobileShopsAndMore {
    constructor() {
        this.env = DEFAULT_ENVIRONMENT;
        this.showActiveDrawer = (overlayRef, item) => {
            overlayRef.style.display = 'block';
            this.sendNavigationClickAnalyticsEvent(item);
            this.setActiveDrawer(overlayRef, 2);
        };
        this.handlePressEnterKey = (event, overlayRef, item) => {
            if (isFeatureEnabled(FEATURE_KEYBOARD, this.env)) {
                if (event.key === 'Enter') {
                    this.showActiveDrawer(overlayRef, item);
                }
            }
        };
    }
    sendNavigationClickAnalyticsEvent(item) {
        const contentItem = { PhraseId: item.PhraseId, Text: item.Text, Link: undefined };
        const analyticsSetup = {
            applicationId: analyticsSetupStore.get('applicationId'),
            locale: analyticsSetupStore.get('locale'),
            window: analyticsSetupStore.get('window'),
            environment: analyticsSetupStore.get('environment')
        };
        const navigationClickEvent = new NavigationClickEvent(analyticsSetup, contentItem);
        const pagData = (window['pagData'] = window['pagData'] || []);
        pagData.push(navigationClickEvent.event());
    }
    getItems() {
        const items = [];
        const shops = navContentStore.get('shops');
        const more = navContentStore.get('more');
        if (shops && shops.length > 0) {
            items.push(shops[0]);
        }
        if (more && more.length > 0) {
            items.push(more[0]);
        }
        return items;
    }
    render() {
        const items = this.getItems();
        return (h(Host, { class: "mobile-shops-and-more" }, items.map((item) => {
            let overlayRef;
            return (h("div", { class: "shops-and-more-container" },
                h("phn-shops-and-more-item", { item: item, class: "shops-and-more-item", tabindex: "0", onClick: () => this.showActiveDrawer(overlayRef, item), onKeyDown: (event) => this.handlePressEnterKey(event, overlayRef, item) }),
                h("phn-drawer-shops-and-more", { headline: item.Items && item.Items.length === 1 ? item.Text : '', item: item.Items && item.Items.length === 1 ? item.Items[0] : item, class: "shops-and-more-overlay", setActiveDrawer: this.setActiveDrawer, closeActiveDrawer: this.closeActiveDrawer, ref: (el) => (overlayRef = el) })));
        })));
    }
    static get is() { return "phn-mobile-shops-and-more"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() { return {
        "$": ["mobile-shops-and-more.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["mobile-shops-and-more.css"]
    }; }
    static get properties() { return {
        "setActiveDrawer": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(el: HTMLElement, level: number) => void",
                "resolved": "(el: HTMLElement, level: number) => void",
                "references": {
                    "HTMLElement": {
                        "location": "global"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "closeActiveDrawer": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(level: number) => void",
                "resolved": "(level: number) => void",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "env": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "env",
            "reflect": false,
            "defaultValue": "DEFAULT_ENVIRONMENT"
        }
    }; }
}
