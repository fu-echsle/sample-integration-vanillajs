import { Component, Method, Prop, h } from '@stencil/core';
import { EMPTY_SERIES } from '../../utility/constants';
import { ModelRangeOverlayLoadEvent } from '../../services/datalayer/model-range-overlay-load-event';
import { analyticsSetupStore } from '../../state/analytics-setup-store';
export class CarSeriesModelOverview {
    constructor() {
        this.series = EMPTY_SERIES;
    }
    async triggerAnalyticsEvent() {
        const pagData = (window['pagData'] = window['pagData'] || []);
        const analyticsSetup = {
            applicationId: analyticsSetupStore.get('applicationId'),
            locale: analyticsSetupStore.get('locale'),
            window: analyticsSetupStore.get('window'),
            environment: analyticsSetupStore.get('environment')
        };
        const analyticsEvent = new ModelRangeOverlayLoadEvent(analyticsSetup, this.series.Name, this.series);
        pagData.push(analyticsEvent.event());
    }
    render() {
        return (h("div", { class: "car-series-model-overview" },
            h("phn-car-meta-functionalities", { name: this.series.Name, items: this.series.Meta }),
            h("phn-car-model-list", { series: this.series }),
            h("phn-car-further-links", { items: this.series.Further })));
    }
    static get is() { return "phn-car-series-model-overview"; }
    static get encapsulation() { return "scoped"; }
    static get properties() { return {
        "series": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Series",
                "resolved": "Series",
                "references": {
                    "Series": {
                        "location": "import",
                        "path": "../../entities/series"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "defaultValue": "EMPTY_SERIES"
        }
    }; }
    static get methods() { return {
        "triggerAnalyticsEvent": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        }
    }; }
}
