import gsap from 'gsap';
export class MenuDrawerAnimation {
    constructor() {
        this.slideInFirstMenuDrawer = (element, eventDispatch) => {
            // Specifically used to slide in first drawer with backdrop
            const menuDrawerContainer = element.querySelector('.menu-drawer-container');
            const styles = {
                visibility: 'visible',
                backgroundColor: 'rgba(0,0,0,0)'
            };
            Object.assign(menuDrawerContainer.style, styles);
            gsap.to(menuDrawerContainer, {
                backgroundColor: 'rgba(0,0,0,0.8)',
                duration: 0.32
            });
            gsap.to(element.querySelector('.menu-drawer-content'), {
                right: '0%',
                duration: 0.32,
                ease: 'sine.inOut',
                onComplete: () => {
                    eventDispatch();
                }
            });
        };
        this.slideInMenuDrawer = (mobileLayoutElement, element) => {
            // Slide in all other drawers except first and without backdrop
            element.querySelector('.menu-drawer-container').setAttribute('style', 'visibility: visible;');
            gsap.to(element.querySelector('.menu-drawer-content'), {
                right: '0%',
                duration: 0.32,
                ease: 'sine.inOut',
                onComplete: () => {
                    if (mobileLayoutElement) {
                        const bottomDrawers = mobileLayoutElement.querySelectorAll('.drawer-trigger:not(:last-child) .menu-drawer-content');
                        const lastBottomDrawer = bottomDrawers[bottomDrawers.length - 1];
                        lastBottomDrawer.scrollTop = 0;
                        lastBottomDrawer.style.visibility = 'hidden';
                    }
                }
            });
        };
        this.slideOutMenuDrawer = (mobileLayout, element, callback) => {
            const bottomDrawers = mobileLayout.querySelectorAll('.drawer-trigger:not(:last-child)');
            const lastBottomDrawer = bottomDrawers[bottomDrawers.length - 1];
            lastBottomDrawer.querySelector('.menu-drawer-content').style.visibility = 'visible';
            lastBottomDrawer.focus();
            gsap.to(element.querySelector('.menu-drawer-content'), {
                right: '-100%',
                duration: 0.24,
                ease: 'sine.inOut',
                onComplete: () => {
                    element.querySelector('.menu-drawer-container').setAttribute('style', 'visibility:hidden');
                    callback();
                }
            });
        };
        this.slideOutAllMenuDrawers = (mobileLayoutElement, resetDrawerStates) => {
            gsap.to(mobileLayoutElement.querySelector('.drawer-trigger .menu-drawer-container'), {
                backgroundColor: 'rgba(0,0,0,0)',
                duration: 0.24
            });
            gsap.to(mobileLayoutElement.querySelectorAll('.drawer-trigger .menu-drawer-content'), {
                right: '-100%',
                duration: 0.24,
                ease: 'sine.inOut',
                onComplete: () => {
                    resetDrawerStates();
                }
            });
        };
    }
}
