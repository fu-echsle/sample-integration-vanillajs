import { v4 as uuidv4 } from 'uuid';
import { config } from '../env-config';
import * as Logger from './logger';
import { LOADING_STATUS, LOGGED_IN_USER_NO_NAME_STATUS, LOGGED_OUT_USER_STATUS } from './constants';
import { navContentStore } from './nav-content-store';
const deriveLoggedInStatusFromUserData = (userData) => {
    let status;
    if (userData.firstName) {
        status = userData.firstName;
        if (userData.middleName) {
            status += ` ${userData.middleName}`;
            if (userData.lastName) {
                status += ` ${userData.lastName}`;
            }
        }
        else {
            if (userData.lastName) {
                status += ` ${userData.lastName}`;
            }
        }
    }
    else {
        if (userData.middleName) {
            status = userData.middleName;
            if (userData.lastName) {
                status += ` ${userData.lastName}`;
            }
        }
        else {
            if (userData.lastName) {
                status = userData.lastName;
            }
        }
    }
    return status ? status : LOGGED_IN_USER_NO_NAME_STATUS;
};
const getLoggedInStatus = async (accessToken, locale, env) => {
    let userProfile, userLoggedInStatus;
    try {
        const configuration = config(env);
        const init = {
            method: 'GET',
            headers: {
                'Accept-Language': `${locale.toHeaderString()}`,
                'x-trace-id': uuidv4(),
                apikey: configuration.CLIENT_ID,
                Authorization: `Bearer ${accessToken}`,
                Accept: 'application/json'
            }
        };
        userProfile = await fetch(`${configuration.PROFILE_API_URL}?country=${locale.country}`, init);
    }
    catch (e) {
        const logData = `Exception occurred while fetching user info: ${JSON.stringify(e.message)}`;
        Logger.errorLogRequest('user_profile', logData, env);
        userLoggedInStatus = LOGGED_IN_USER_NO_NAME_STATUS;
    }
    if (!userLoggedInStatus) {
        if (userProfile.status === 200) {
            const userData = await userProfile.json();
            userLoggedInStatus = deriveLoggedInStatusFromUserData(userData);
        }
        else {
            Logger.errorLogRequest('user_profile', `Error occurred: ${userProfile.status} ${userProfile.statusText}`, env);
            userLoggedInStatus = undefined;
        }
    }
    return userLoggedInStatus;
};
const getUnreadMessagesCount = async (accessToken, env
//currentUnreadMessagesCount = 0
) => {
    let unreadMessagesCount = 0;
    let unreadMessagesCountResponse;
    try {
        const configuration = config(env);
        const init = {
            method: 'GET',
            headers: {
                'x-trace-id': uuidv4(),
                apikey: configuration.CLIENT_ID,
                Authorization: `Bearer ${accessToken}`,
                Accept: 'application/json'
            }
        };
        unreadMessagesCountResponse = await fetch(configuration.UNREAD_MESSAGES_COUNT_API_URL, init);
        if (unreadMessagesCountResponse.status === 200) {
            const unreadMessagesCountPayload = await unreadMessagesCountResponse.json();
            if (unreadMessagesCountPayload.data &&
                unreadMessagesCountPayload.data.unreadCount &&
                typeof unreadMessagesCountPayload.data.unreadCount === 'number') {
                unreadMessagesCount = unreadMessagesCountPayload.data.unreadCount;
            }
        }
        else {
            Logger.errorLogRequest('unread_messages_count', `Error occurred: ${unreadMessagesCountResponse.status} ${unreadMessagesCountResponse.statusText}`, env);
        }
    }
    catch (e) {
        const logData = `Exception occurred while fetching unread message count: ${JSON.stringify(e.message)}`;
        Logger.errorLogRequest('unread_messages_count', logData, env);
    }
    return unreadMessagesCount;
};
export const updateLoggedInStatus = async (newToken, localeObject) => {
    const env = navContentStore.get('env');
    if (navContentStore.get('loggedInState') !== LOADING_STATUS) {
        navContentStore.set('loggedInState', LOADING_STATUS);
    }
    const userLoggedInStatus = await getLoggedInStatus(newToken, localeObject, env);
    if (!userLoggedInStatus) {
        navContentStore.set('loggedInState', LOGGED_OUT_USER_STATUS);
        return undefined;
    }
    else {
        navContentStore.set('loggedInState', userLoggedInStatus);
        Logger.debugLogRequest('token_update', 'User data response captured successfully!', env);
        return true;
    }
};
export const updateUnreadMessagesCount = async (accessToken) => {
    const env = navContentStore.get('env');
    const unreadMessagesCount = await getUnreadMessagesCount(accessToken, env);
    navContentStore.set('unreadMessagesCount', unreadMessagesCount);
};
