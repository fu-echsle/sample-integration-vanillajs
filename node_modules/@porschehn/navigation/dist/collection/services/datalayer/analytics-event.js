import { ContextCollectionDimensions, PageExperienceCollectionDimensions, VisitorCollectionDimensions } from './custom-dimensions';
var Breakpoints;
(function (Breakpoints) {
    Breakpoints[Breakpoints["XXS"] = 0] = "XXS";
    Breakpoints[Breakpoints["XS"] = 480] = "XS";
    Breakpoints[Breakpoints["S"] = 760] = "S";
    Breakpoints[Breakpoints["M"] = 1000] = "M";
    Breakpoints[Breakpoints["L"] = 1300] = "L";
    Breakpoints[Breakpoints["XL"] = 1760] = "XL";
    Breakpoints[Breakpoints["XXL"] = 1920] = "XXL";
})(Breakpoints || (Breakpoints = {}));
var DeviceBrowserOrientation;
(function (DeviceBrowserOrientation) {
    DeviceBrowserOrientation["Portrait"] = "p";
    DeviceBrowserOrientation["Landscape"] = "l";
})(DeviceBrowserOrientation || (DeviceBrowserOrientation = {}));
export class AnalyticsEvent {
    constructor(analyticsSetup) {
        this.initContext();
        this.initVisitor();
        this.initPageExperience();
        this.context.applicationId = analyticsSetup.applicationId;
        this.context.country = analyticsSetup.locale.country;
        this.context.language = analyticsSetup.locale.language;
        this.context.timestamp = new Date(Date.now()).toISOString();
        this.context.environment = this.getEnvironmentAbreviation(analyticsSetup.environment);
        this.populateVisitor(analyticsSetup.window);
        this.populatePageExperience(window);
    }
    event() {
        const context = this.context;
        const visitor = this.visitor;
        const pageExperience = this.pageExperience;
        return {
            context,
            visitor,
            pageExperience
        };
    }
    initContext() {
        this.context = {
            [ContextCollectionDimensions.ApplicationId]: undefined,
            [ContextCollectionDimensions.Language]: undefined,
            [ContextCollectionDimensions.Country]: undefined,
            [ContextCollectionDimensions.EventAction]: undefined,
            [ContextCollectionDimensions.Timestamp]: undefined,
            [ContextCollectionDimensions.Environment]: undefined
        };
    }
    initVisitor() {
        this.visitor = {
            [VisitorCollectionDimensions.DeviceBrowserWidth]: undefined,
            [VisitorCollectionDimensions.DeviceBrowserHeight]: undefined,
            [VisitorCollectionDimensions.DeviceBrowserBreakpoint]: undefined,
            [VisitorCollectionDimensions.DeviceBrowserOrientation]: undefined
        };
    }
    initPageExperience() {
        this.pageExperience = {
            [PageExperienceCollectionDimensions.PageId]: undefined,
            [PageExperienceCollectionDimensions.PageName]: undefined
        };
    }
    populateVisitor(window) {
        this.visitor.deviceBrowserHeight = window.innerHeight.toString();
        this.visitor.deviceBrowserWidth = window.innerWidth.toString();
        this.visitor.deviceBrowserBreakpoint = this.getLowerBreakpointForWidth(window.innerWidth).toString();
        this.visitor.deviceBrowserOrientation = AnalyticsEvent.getDeviceOrientation(window);
    }
    populatePageExperience(window) {
        this.pageExperience.pageId = `${window.location.protocol}//${window.location.host}${window.location.pathname}`;
        this.pageExperience.pageName = window.document.title.length > 0 ? window.document.title : undefined;
    }
    getLowerBreakpointForWidth(width) {
        const breakpointValues = Object.values(Breakpoints);
        return breakpointValues
            .filter((breakpointValue) => breakpointValue <= width)
            .reverse()
            .shift();
    }
    getEnvironmentAbreviation(environment) {
        if (environment === 'production') {
            return 'P';
        }
        else if (environment === 'preview') {
            return 'PP';
        }
        else {
            return 'K';
        }
    }
    static getDeviceOrientation(window) {
        let orientation;
        if (window.matchMedia('(orientation: landscape)').matches) {
            orientation = DeviceBrowserOrientation.Landscape;
        }
        else if (window.matchMedia('(orientation: portrait)').matches) {
            orientation = DeviceBrowserOrientation.Portrait;
        }
        return orientation;
    }
}
