import { config } from '../env-config';
import * as Logger from './logger';
import { DEFAULT_EMPTY_CONTENT, DEFAULT_LOCALE, DEFAULT_EMPTY_CONTENT_RESPONSE } from '../utility/constants';
export const fetchContent = async (env) => {
    const loadData = async () => {
        let data;
        try {
            data = await fetch(config(env).CONTENT_URL, {
                headers: {
                    'Cache-Control': 'no-cache'
                }
            });
            if (!data.ok) {
                throw new Error(`${data.status} ${data.statusText}`);
            }
            return data.json();
        }
        catch (e) {
            Logger.errorLogRequest('content', `Failed to fetch content with error: ${e}`, env);
            return DEFAULT_EMPTY_CONTENT_RESPONSE;
        }
    };
    const [content] = await Promise.all([loadData()]);
    return content;
};
export const getContentForLocale = (locale, content, env) => {
    if (content === DEFAULT_EMPTY_CONTENT_RESPONSE) {
        const logData = `Received empty content. Setting DEFAULT_EMPTY_CONTENT as fallback.`;
        Logger.infoLogRequest('content', logData, env);
        return DEFAULT_EMPTY_CONTENT;
    }
    const availableLocales = Object.keys(content);
    if (availableLocales.includes(locale.toString())) {
        return content[locale.toString()];
    }
    else {
        const logData = `No locale or invalid locale provided. Setting ${DEFAULT_LOCALE.toString()} as fallback.`;
        Logger.infoLogRequest('content', logData, env);
        return content[DEFAULT_LOCALE];
    }
};
