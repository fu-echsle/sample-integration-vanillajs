import { config } from '../env-config';
import * as Logger from './logger';
import { DEFAULT_LOCALE, DEFAULT_MENU, DEFAULT_METAFUNCTIONALITIES, DEFAULT_MORE, DEFAULT_SERIES_LIST, DEFAULT_SHOPS } from './constants';
const DEFAULT_EMPTY_CONTENT = {
    seriesList: DEFAULT_SERIES_LIST,
    shops: DEFAULT_SHOPS,
    more: DEFAULT_MORE,
    metafunctionalities: DEFAULT_METAFUNCTIONALITIES,
    menu: DEFAULT_MENU
};
export const fetchContent = async (env) => {
    const loadData = async () => {
        let data;
        try {
            data = await fetch(config(env).CONTENT_URL, {
                headers: {
                    'Cache-Control': 'no-cache'
                }
            });
            return data.json();
        }
        catch (e) {
            Logger.errorLogRequest('content', `Failed to fetch content with error: ${e}`, env);
            return DEFAULT_EMPTY_CONTENT;
        }
    };
    const [content] = await Promise.all([loadData()]);
    return content;
};
export const getContentForLocale = (locale, content, env) => {
    const availableLocales = Object.keys(content);
    if (availableLocales.includes(locale.toString())) {
        return content[locale.toString()];
    }
    else {
        const logData = `No locale or invalid locale provided. Setting ${DEFAULT_LOCALE.toString()} as fallback.`;
        Logger.infoLogRequest('content', logData, env);
        return content[DEFAULT_LOCALE];
    }
};
