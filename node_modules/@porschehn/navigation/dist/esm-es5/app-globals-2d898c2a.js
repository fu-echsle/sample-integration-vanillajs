import { C as CSS, p as plt, w as win, a as promiseResolve, d as doc, N as NAMESPACE, c as createCommonjsModule, e as commonjsGlobal } from './_commonjsHelpers-b0a15113.js';
/*
 Stencil Client Patch v1.16.5 | MIT Licensed | https://stenciljs.com
 */
var noop = function () {
    /* noop*/
};
var IS_DENO_ENV = typeof Deno !== 'undefined';
var IS_NODE_ENV = !IS_DENO_ENV &&
    typeof global !== 'undefined' &&
    typeof require === 'function' &&
    !!global.process &&
    typeof __filename === 'string' &&
    (!global.origin || typeof global.origin !== 'string');
var IS_DENO_WINDOWS_ENV = IS_DENO_ENV && Deno.build.os === 'windows';
var getCurrentDirectory = IS_NODE_ENV ? process.cwd : IS_DENO_ENV ? Deno.cwd : function () { return '/'; };
var exit = IS_NODE_ENV ? process.exit : IS_DENO_ENV ? Deno.exit : noop;
var getDynamicImportFunction = function (namespace) { return "__sc_import_" + namespace.replace(/\s|-/g, '_'); };
var patchEsm = function () {
    // NOTE!! This fn cannot use async/await!
    // @ts-ignore
    if (!(CSS && CSS.supports && CSS.supports('color', 'var(--c)'))) {
        // @ts-ignore
        return import(/* webpackChunkName: "polyfills-css-shim" */ './css-shim-c25d0fa8.js').then(function () {
            if ((plt.$cssShim$ = win.__cssshim)) {
                return plt.$cssShim$.i();
            }
            else {
                // for better minification
                return 0;
            }
        });
    }
    return promiseResolve();
};
var patchBrowser = function () {
    {
        // shim css vars
        plt.$cssShim$ = win.__cssshim;
    }
    // @ts-ignore
    var scriptElm = Array.from(doc.querySelectorAll('script')).find(function (s) { return new RegExp("/" + NAMESPACE + "(\\.esm)?\\.js($|\\?|#)").test(s.src) || s.getAttribute('data-stencil-namespace') === NAMESPACE; });
    var opts = scriptElm['data-opts'] || {};
    if ('onbeforeload' in scriptElm && !history.scrollRestoration /* IS_ESM_BUILD */) {
        // Safari < v11 support: This IF is true if it's Safari below v11.
        // This fn cannot use async/await since Safari didn't support it until v11,
        // however, Safari 10 did support modules. Safari 10 also didn't support "nomodule",
        // so both the ESM file and nomodule file would get downloaded. Only Safari
        // has 'onbeforeload' in the script, and "history.scrollRestoration" was added
        // to Safari in v11. Return a noop then() so the async/await ESM code doesn't continue.
        // IS_ESM_BUILD is replaced at build time so this check doesn't happen in systemjs builds.
        return {
            then: function () {
                /* promise noop */
            },
        };
    }
    {
        opts.resourcesUrl = new URL('.', new URL(scriptElm.getAttribute('data-resources-url') || scriptElm.src, win.location.href)).href;
        {
            patchDynamicImport(opts.resourcesUrl, scriptElm);
        }
        if (!win.customElements) {
            // module support, but no custom elements support (Old Edge)
            // @ts-ignore
            return import(/* webpackChunkName: "polyfills-dom" */ './dom-99e33274.js').then(function () { return opts; });
        }
    }
    return promiseResolve(opts);
};
var patchDynamicImport = function (base, orgScriptElm) {
    var importFunctionName = getDynamicImportFunction(NAMESPACE);
    try {
        // test if this browser supports dynamic imports
        // There is a caching issue in V8, that breaks using import() in Function
        // By generating a random string, we can workaround it
        // Check https://bugs.chromium.org/p/chromium/issues/detail?id=990810 for more info
        win[importFunctionName] = new Function('w', "return import(w);//" + Math.random());
    }
    catch (e) {
        // this shim is specifically for browsers that do support "esm" imports
        // however, they do NOT support "dynamic" imports
        // basically this code is for old Edge, v18 and below
        var moduleMap_1 = new Map();
        win[importFunctionName] = function (src) {
            var url = new URL(src, base).href;
            var mod = moduleMap_1.get(url);
            if (!mod) {
                var script_1 = doc.createElement('script');
                script_1.type = 'module';
                script_1.crossOrigin = orgScriptElm.crossOrigin;
                script_1.src = URL.createObjectURL(new Blob(["import * as m from '" + url + "'; window." + importFunctionName + ".m = m;"], { type: 'application/javascript' }));
                mod = new Promise(function (resolve) {
                    script_1.onload = function () {
                        resolve(win[importFunctionName].m);
                        script_1.remove();
                    };
                });
                moduleMap_1.set(url, mod);
                doc.head.appendChild(script_1);
            }
            return mod;
        };
    }
};
var componentsJs = createCommonjsModule(function (module, exports) {
    !function (e, t) { module.exports = t(); }("undefined" != typeof self ? self : commonjsGlobal, (function () { return function () { var e = { d: function (t, n) { for (var o in n)
            e.o(n, o) && !e.o(t, o) && Object.defineProperty(t, o, { enumerable: !0, get: n[o] }); }, o: function (e, t) { return Object.prototype.hasOwnProperty.call(e, t); }, r: function (e) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: !0 }); } }, t = {}; function n(e) { if ("noModule" in HTMLScriptElement.prototype) {
        var t_1 = (document.createElement("script"));
        t_1.src = e, t_1.setAttribute("crossorigin", ""), document.body.appendChild(t_1);
    } } e.r(t), e.d(t, { componentsReady: function () { return s; }, load: function () { return r; } }); var o = "porscheDesignSystem"; var r = function (e) {
        if (e === void 0) { e = { prefix: "" }; }
        !function (_a) {
            var e = _a.script, t = _a.version, r = _a.prefix;
            var s;
            var c = null !== (s = function (e) { var t = (document[o] || (document[o] = {}), document[o]), _a = t, _b = e, _c = _a[_b], n = _c === void 0 ? null : _c; if (null === n) {
                var n_1 = { isLoaded: !1, prefixes: [], registerCustomElements: null };
                t[e] = n_1;
            } return t[e]; }(t)) && void 0 !== s ? s : {}, i = c.isLoaded, d = c.prefixes, u = c.registerCustomElements;
            i || (n(e), c.isLoaded = !0), d.includes(r) || (d.push(r), u && u(r));
        }(Object.assign(Object.assign({}, { version: "2.0.2", script: (typeof window !== 'undefined' && window.PORSCHE_DESIGN_SYSTEM_CDN === 'cn' ? 'https://cdn.ui.porsche.cn' : 'https://cdn.ui.porsche.com') + "/porsche-design-system/components/porsche-design-system.v2.0.2.af5ac9ef7e24f6353b02.js" }), e));
    }, s = function (e) {
        if (e === void 0) { e = document.body; }
        var t;
        var n = new Promise((function (e) { return t = e; }));
        if (c())
            i(e, t);
        else {
            var n_2 = "readystatechange", o_1 = function () { c() && (document.removeEventListener(n_2, o_1), i(e, t)); };
            document.addEventListener(n_2, o_1);
        }
        return n;
    }, c = function () { return "complete" === document.readyState; }, i = function (e, t) { var n = d(e); Promise.all(n).then((function (e) { return t(e.length); })).catch(console.error); }, d = function (e) { var t = []; return 1 === (null == e ? void 0 : e.nodeType) && Array.from(e.children).forEach((function (e) { f(e) && t.push(e.componentOnReady()), t = t.concat(d(e)); })), t; }, u = /^(.*-)?P-(.*)$/, f = function (e) { return u.exec(e.tagName) && "function" == typeof e.componentOnReady; }; return t; }(); }));
});
function appGlobalScript() {
    componentsJs.load({ prefix: 'phn' });
}
var globalScripts = appGlobalScript;
export { patchEsm as a, globalScripts as g, patchBrowser as p };
