import { Component, Host, Prop, State, Watch, h } from '@stencil/core';
import StateTunnel from '../../services/state-tunnel';
import { LinkItem } from '../entities/item';
import { LOADING_STATUS, LOGGED_OUT_USER_STATUS, MYPORSCHE_PHRASE_ID } from '../../services/constants';
export class Myporsche {
    constructor() {
        this.myporscheLink = '';
        this.myporscheText = '';
        this.loggedInStatusTranslations = {};
    }
    loggedInStateChanged() {
        this.getSubTextForUser();
    }
    getSubTextForUser() {
        const phraseId = `${MYPORSCHE_PHRASE_ID}.${this.loggedInState}`;
        this.subText = this.loggedInStatusTranslations[phraseId] || this.loggedInState;
    }
    renderLoggedOutComponent() {
        return (h("p-link-pure", { class: "myporsche-logged-out", href: this.myporscheLink, onClick: () => {
                const linkItem = new LinkItem(MYPORSCHE_PHRASE_ID, this.myporscheText, this.myporscheLink);
                this.sendMetaFunctionClickAnalyticsEvent(linkItem);
            }, size: "inherit", icon: "user" },
            this.myporscheText,
            h("p-text", { class: "login-status", color: "inherit", size: "inherit", ellipsis: "true", align: "left" }, this.subText)));
    }
    renderLoadingComponent() {
        return (h("p-button-pure", { loading: "true", size: "inherit" }, this.myporscheText));
    }
    renderLoggedInComponent() {
        return [
            h("phn-myporsche-drawer", { class: "myporsche-logged-in", myPorscheText: this.myporscheText, loginStatus: this.subText, setActiveDrawer: this.setActiveDrawer, closeActiveDrawer: this.closeActiveDrawer }),
            h("phn-myporsche-flyout", { class: "myporsche-flyout", myPorscheText: this.myporscheText, loginStatus: this.subText })
        ];
    }
    render() {
        return (h(Host, null, this.loggedInState === LOGGED_OUT_USER_STATUS
            ? this.renderLoggedOutComponent()
            : this.loggedInState === LOADING_STATUS
                ? this.renderLoadingComponent()
                : this.renderLoggedInComponent()));
    }
    static get is() { return "phn-myporsche"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() { return {
        "$": ["myporsche.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["myporsche.css"]
    }; }
    static get properties() { return {
        "loggedInState": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "logged-in-state",
            "reflect": false
        },
        "myporscheLink": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "myporsche-link",
            "reflect": false,
            "defaultValue": "''"
        },
        "myporscheText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "myporsche-text",
            "reflect": false,
            "defaultValue": "''"
        },
        "sendMetaFunctionClickAnalyticsEvent": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(linkItem: LinkItem) => void",
                "resolved": "(linkItem: LinkItem) => void",
                "references": {
                    "LinkItem": {
                        "location": "import",
                        "path": "../entities/item"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "loggedInStatusTranslations": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "{}",
                "resolved": "{}",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "defaultValue": "{}"
        },
        "closeActiveDrawer": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(level: number) => void",
                "resolved": "(level: number) => void",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "setActiveDrawer": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(element: HTMLElement, level: number) => void",
                "resolved": "(element: HTMLElement, level: number) => void",
                "references": {
                    "HTMLElement": {
                        "location": "global"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
    static get states() { return {
        "subText": {}
    }; }
    static get watchers() { return [{
            "propName": "loggedInState",
            "methodName": "loggedInStateChanged"
        }]; }
}
StateTunnel.injectProps(Myporsche, ['loggedInState']);
