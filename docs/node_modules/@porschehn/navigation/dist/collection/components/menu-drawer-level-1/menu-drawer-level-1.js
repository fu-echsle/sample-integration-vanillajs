import { Component, Element, Event, h, Listen, Method, Prop } from '@stencil/core';
import StateTunnel from '../../services/state-tunnel';
import { MenuDrawerAnimation } from '../../services/menu-drawer-animation';
import { DEFAULT_SERIES_LIST } from '../../services/constants';
export class MenuDrawerLevel1 {
    constructor() {
        this.menuDrawerAnimation = new MenuDrawerAnimation();
        this.activeDrawerLevel = 1;
        this.setActiveDrawer = (element, level) => {
            this.activeDrawerElement = element;
            this.activeDrawerLevel = level;
            let scrollableElement;
            if (this.activeDrawerElement.classList.contains(`drawer-level-${this.activeDrawerLevel}-item-scroll`)) {
                scrollableElement = this.activeDrawerElement;
            }
            else {
                scrollableElement = this.activeDrawerElement.querySelector(`.drawer-level-${this.activeDrawerLevel}-item-scroll`);
            }
            if (scrollableElement) {
                scrollableElement.scrollTop = 0;
            }
        };
        this.closeActiveDrawer = (level) => {
            this.activeDrawerLevel = level - 1;
            this.activeDrawerElement = this.el.querySelector(`.drawer-level-${this.activeDrawerLevel}-item`);
            let scrollableElement;
            if (this.activeDrawerElement.classList.contains(`drawer-level-${this.activeDrawerLevel}-item-scroll`)) {
                scrollableElement = this.activeDrawerElement;
            }
            else {
                scrollableElement = this.activeDrawerElement.querySelector(`.drawer-level-${this.activeDrawerLevel}-item-scroll`);
            }
            if (scrollableElement) {
                scrollableElement.scrollTop = 0;
            }
        };
    }
    async show() {
        this.menuOverlayOpen.emit();
        this.menuDrawerAnimation.slideIn(this.el);
        this.el.querySelector('.drawer-level-1-item-scroll').scrollTop = 0;
    }
    hide() {
        this.menuOverlayClose.emit();
        this.menuDrawerAnimation.slideOut(this.el);
    }
    handelClose() {
        this.mobileCarSeriesListElement.hideAll();
        this.hide();
    }
    getItems() {
        const items = [];
        if (this.shops && this.shops.length > 0) {
            items.push(this.shops[0]);
        }
        if (this.more && this.more.length > 0) {
            items.push(this.more[0]);
        }
        return items;
    }
    componentDidLoad() {
        this.hide();
    }
    render() {
        const seriesList = !this.seriesList ? DEFAULT_SERIES_LIST : this.seriesList;
        const items = this.getItems();
        return (h("div", { class: "menu-drawer-level-1 drawer-level-1-item" },
            h("div", { class: "drawer-level-1 drawer-level-1-item-scroll" },
                h("div", { class: "drawer-container" },
                    h("div", { class: "drawer-close" },
                        h("phn-close-button", { class: "close-button" })),
                    h("div", { class: "drawer-content" },
                        h("phn-mobile-car-series-list", { ref: (el) => (this.mobileCarSeriesListElement = el), class: "mobile-car-series-list", carSeries: seriesList, setActiveDrawer: this.setActiveDrawer, closeActiveDrawer: this.closeActiveDrawer }),
                        h("phn-mobile-shops-and-more", { items: items, class: "mobile-shops-and-more", setActiveDrawer: this.setActiveDrawer, closeActiveDrawer: this.closeActiveDrawer }),
                        h("phn-meta-functionalities", { class: "meta-functionalities", setActiveDrawer: this.setActiveDrawer, closeActiveDrawer: this.closeActiveDrawer }))))));
    }
    static get is() { return "phn-menu-drawer-level-1"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() { return {
        "$": ["menu-drawer-level-1.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["menu-drawer-level-1.css"]
    }; }
    static get properties() { return {
        "seriesList": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Series[]",
                "resolved": "Series[]",
                "references": {
                    "Series": {
                        "location": "import",
                        "path": "../entities/series"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "shops": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "TextItem[]",
                "resolved": "TextItem[]",
                "references": {
                    "TextItem": {
                        "location": "import",
                        "path": "../entities/item"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "more": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "TextItem[]",
                "resolved": "TextItem[]",
                "references": {
                    "TextItem": {
                        "location": "import",
                        "path": "../entities/item"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
    static get events() { return [{
            "method": "menuOverlayOpen",
            "name": "menuOverlayOpen",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "menuOverlayClose",
            "name": "menuOverlayClose",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "show": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "el"; }
    static get listeners() { return [{
            "name": "closeEvent",
            "method": "handelClose",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
}
StateTunnel.injectProps(MenuDrawerLevel1, ['shops', 'more', 'seriesList']);
