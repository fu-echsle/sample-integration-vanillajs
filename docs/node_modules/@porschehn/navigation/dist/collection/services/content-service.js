import uuid from 'uuid';
import { config } from '../env-config';
import * as Logger from './logger';
import { DEFAULT_LOCALE, DEFAULT_MENU, DEFAULT_METAFUNCTIONALITIES, DEFAULT_MORE, DEFAULT_SERIES_LIST, DEFAULT_SHOPS } from './constants';
const DEFAULT_EMPTY_CONTENT = {
    seriesList: DEFAULT_SERIES_LIST,
    shops: DEFAULT_SHOPS,
    more: DEFAULT_MORE,
    metafunctionalities: DEFAULT_METAFUNCTIONALITIES,
    menu: DEFAULT_MENU
};
export const fetchContent = async (env) => {
    const loadData = async () => {
        let data;
        try {
            data = await fetch(config(env).CONTENT_URL, {
                headers: {
                    'Cache-Control': 'no-cache'
                }
            });
            return data.json();
        }
        catch (e) {
            Logger.errorLogRequest('content', `Failed to fetch content with error: ${e}`, env);
            return DEFAULT_EMPTY_CONTENT;
        }
    };
    const [content] = await Promise.all([loadData()]);
    return content;
};
export const getContentForLocale = (locale, content, env) => {
    const availableLocales = Object.keys(content);
    if (availableLocales.includes(locale.toString())) {
        return content[locale.toString()];
    }
    else {
        const logData = `No locale or invalid locale provided. Setting ${DEFAULT_LOCALE.toString()} as fallback.`;
        Logger.infoLogRequest('content', logData, env);
        return content[DEFAULT_LOCALE];
    }
};
const deriveLoggedInStatusFromUserData = (userData, defaultLoggedInStatus) => {
    let status;
    if (userData.firstName) {
        status = userData.firstName;
        if (userData.middleName) {
            status += ` ${userData.middleName}`;
            if (userData.lastName) {
                status += ` ${userData.lastName}`;
            }
        }
        else {
            if (userData.lastName) {
                status += ` ${userData.lastName}`;
            }
        }
    }
    else {
        if (userData.middleName) {
            status = userData.middleName;
            if (userData.lastName) {
                status += ` ${userData.lastName}`;
            }
        }
        else {
            if (userData.lastName) {
                status = userData.lastName;
            }
        }
    }
    return status ? status : defaultLoggedInStatus;
};
export const getLoggedInStatus = async (accessToken, locale, defaultLoggedInStatus, env) => {
    let userProfile, userLoggedInStatus;
    try {
        const configuration = config(env);
        const init = {
            method: 'GET',
            headers: {
                'Accept-Language': `${locale.toHeaderString()}`,
                'x-trace-id': uuid(),
                apikey: configuration.CLIENT_ID,
                Authorization: `Bearer ${accessToken}`,
                Accept: 'application/json'
            }
        };
        userProfile = await fetch(`${configuration.PROFILE_API_URL}?country=${locale.country}`, init);
    }
    catch (e) {
        const logData = `Exception occurred while fetching user info: ${JSON.stringify(e.message)}`;
        Logger.errorLogRequest('user_profile', logData, env);
        userLoggedInStatus = defaultLoggedInStatus;
    }
    if (!userLoggedInStatus) {
        if (userProfile.status === 200) {
            const userData = await userProfile.json();
            userLoggedInStatus = deriveLoggedInStatusFromUserData(userData, defaultLoggedInStatus);
        }
        else {
            Logger.errorLogRequest('user_profile', `Error occurred: ${userProfile.status} ${userProfile.statusText}`, env);
            userLoggedInStatus = undefined;
        }
    }
    return userLoggedInStatus;
};
