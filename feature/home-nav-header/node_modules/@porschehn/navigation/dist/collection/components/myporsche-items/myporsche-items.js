import { Component, Host, Prop, h } from '@stencil/core';
import { LinkItem } from '../entities/item';
import StateTunnel from '../../services/state-tunnel';
import { MYPORSCHE_PHRASE_ID } from '../../services/constants';
export class MyPorscheItems {
    getMyPorscheItemFromTemplateAsLinkItem(id) {
        const phraseId = `${MYPORSCHE_PHRASE_ID}.${id}`;
        const myPorscheItems = this.metafunctionalities.find((m) => m.PhraseId === MYPORSCHE_PHRASE_ID).Items;
        const myPorscheItem = myPorscheItems.find((item) => item.Id === phraseId);
        return new LinkItem(myPorscheItem.Id, myPorscheItem.Text, myPorscheItem.Link);
    }
    render() {
        return (h(Host, null,
            h("phn-list-item", { class: "myporsche-list-item", item: this.getMyPorscheItemFromTemplateAsLinkItem('carsandservices') }),
            h("phn-list-item", { class: "myporsche-list-item", item: this.getMyPorscheItemFromTemplateAsLinkItem('messages') }),
            h("phn-list-item", { class: "myporsche-list-item", item: this.getMyPorscheItemFromTemplateAsLinkItem('accountadministration') }),
            h("hr", null),
            h("phn-list-item", { class: "myporsche-list-item logout", item: this.getMyPorscheItemFromTemplateAsLinkItem('logout') })));
    }
    static get is() { return "phn-myporsche-items"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() { return {
        "$": ["myporsche-items.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["myporsche-items.css"]
    }; }
    static get properties() { return {
        "metafunctionalities": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "ContentItemWithItems[]",
                "resolved": "ContentItemWithItems[]",
                "references": {
                    "ContentItemWithItems": {
                        "location": "import",
                        "path": "../../services/state-tunnel"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
}
StateTunnel.injectProps(MyPorscheItems, ['metafunctionalities']);
