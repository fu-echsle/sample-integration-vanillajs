import { Component, Host, Method, Prop, State, h, Element } from '@stencil/core';
import StateTunnel from '../../services/state-tunnel';
import { DEFAULT_ENVIRONMENT, FEATURE_KEYBOARD } from '../../services/constants';
import { isFeatureEnabled } from '../../env-config';
export class MegaFlyOutOverlay {
    constructor() {
        this.active = '';
        this.env = DEFAULT_ENVIRONMENT;
        // TODO: Add e2e test
        /* istanbul ignore next */
        this.setBackdropOffset = () => {
            const VIEWPORT_XL = 1920;
            const HEADER_HEIGHT_FROM_L = 118;
            const HEADER_HEIGHT_FROM_XL = 124;
            const previousElement = document.body.querySelector('phn-header').previousElementSibling;
            const headerHeight = document.body.clientWidth >= VIEWPORT_XL ? HEADER_HEIGHT_FROM_XL : HEADER_HEIGHT_FROM_L;
            this.backdropElement.style.top = this.calculateBackdropOffset(window.scrollY, headerHeight, previousElement.clientHeight);
        };
        this.calculateBackdropOffset = (windowScrollHeight, headerHeight, previousElementsHeight) => {
            const offsetFromTop = previousElementsHeight ? previousElementsHeight + headerHeight : headerHeight;
            if (windowScrollHeight > offsetFromTop) {
                return '0';
            }
            if (windowScrollHeight < offsetFromTop) {
                return '';
            }
        };
        this.handlePressEnterKey = (event) => {
            if (isFeatureEnabled(FEATURE_KEYBOARD, this.env)) {
                if (event.key === 'Enter') {
                    this.active = 'active';
                    this.containerElement.style.visibility = 'visible';
                    this.keyboardShowOverlayHandler(this.containerElement);
                }
            }
        };
        this.handleFocus = () => {
            if (isFeatureEnabled(FEATURE_KEYBOARD, this.env)) {
                this.keyboardHideOverlayHandler();
            }
        };
    }
    async showOverlay() {
        window.addEventListener('scroll', this.setBackdropOffset);
        this.active = 'active';
        this.containerElement.style.visibility = 'visible';
        this.showOverlayHandler(this.containerElement);
    }
    async deactivateState() {
        this.active = '';
    }
    async hideOverlay() {
        this.active = '';
        window.removeEventListener('scroll', this.setBackdropOffset);
        this.hideOverlayHandler(this.containerElement);
    }
    render() {
        return (h(Host, { onKeyDown: this.handlePressEnterKey },
            h("div", { class: "mega-fly-out-overlay" },
                h("div", { tabindex: "0", onFocus: this.handleFocus, class: 'mega-fly-out-overlay-button mega-fly-out-overlay-button-' + this.active },
                    h("slot", { name: "button" })),
                h("div", { class: "mega-fly-out-overlay-container", ref: (el) => (this.containerElement = el) },
                    h("div", { class: "mega-fly-out-overlay-content" },
                        h("slot", { name: "content" }))),
                this.active && h("div", { class: "backdrop", ref: (el) => (this.backdropElement = el) }))));
    }
    static get is() { return "phn-mega-fly-out-overlay"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() { return {
        "$": ["mega-fly-out-overlay.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["mega-fly-out-overlay.css"]
    }; }
    static get properties() { return {
        "showOverlayHandler": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(overlayElement: HTMLElement) => void",
                "resolved": "(overlayElement: HTMLElement) => void",
                "references": {
                    "HTMLElement": {
                        "location": "global"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "hideOverlayHandler": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(overlayElement: HTMLElement) => void",
                "resolved": "(overlayElement: HTMLElement) => void",
                "references": {
                    "HTMLElement": {
                        "location": "global"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "keyboardShowOverlayHandler": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(overlayElement: HTMLElement) => void",
                "resolved": "(overlayElement: HTMLElement) => void",
                "references": {
                    "HTMLElement": {
                        "location": "global"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "keyboardHideOverlayHandler": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "() => void",
                "resolved": "() => void",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "env": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "env",
            "reflect": false,
            "defaultValue": "DEFAULT_ENVIRONMENT"
        }
    }; }
    static get states() { return {
        "active": {}
    }; }
    static get methods() { return {
        "showOverlay": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        },
        "deactivateState": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        },
        "hideOverlay": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "element"; }
}
StateTunnel.injectProps(MegaFlyOutOverlay, ['env']);
