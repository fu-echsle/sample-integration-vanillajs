import { Component, Prop, h, Element } from '@stencil/core';
import cx from 'classnames';
import { mapBreakpointPropToPrefixedClasses, prefix, transitionListener, calcLineHeightForElement } from '../../../../utils';
import { insertSlottedStyles } from '../../../../utils/slotted-styles';
export class Text {
    constructor() {
        /** Sets a custom HTML tag depending of the usage of the text component. */
        this.tag = 'p';
        /** Size of the text. Also defines the size for specific breakpoints, like {base: "small", l: "medium"}. You always need to provide a base value when doing this. */
        this.size = 'small';
        /** The weight of the text. */
        this.weight = 'regular';
        /** Text alignment of the component. */
        this.align = 'left';
        /** Basic text color variations depending on theme property. */
        this.color = 'default';
        /** Adds an ellipsis to a single line of text if it overflows. */
        this.ellipsis = false;
        /** Adapts the text color depending on the theme. Has no effect when "inherit" is set as color prop. */
        this.theme = 'light';
    }
    componentDidLoad() {
        const tagName = this.element.tagName.toLowerCase();
        const style = `${tagName} a {
      outline: none transparent;
      color: inherit;
      text-decoration: underline;
      -webkit-transition: outline-color .24s ease, color .24s ease;
      transition: outline-color .24s ease, color .24s ease;
    }

    ${tagName} a:hover {
      color: #d5001c;
    }

    ${tagName} a:focus {
      outline: 2px solid #00d5b9;
      outline-offset: 1px;
    }`;
        insertSlottedStyles(this.element, style);
        transitionListener(this.textTag, 'font-size', () => {
            this.textTag.style.lineHeight = `${calcLineHeightForElement(this.textTag)}`;
        });
    }
    render() {
        const TagType = this.tag;
        const textClasses = cx(prefix('text'), mapBreakpointPropToPrefixedClasses('text--size', this.size), prefix(`text--weight-${this.weight}`), prefix(`text--align-${this.align}`), prefix(`text--color-${this.color}`), this.ellipsis && prefix('text--ellipsis'), this.color !== 'inherit' && prefix(`text--theme-${this.theme}`));
        return (h(TagType, { class: textClasses, ref: el => this.textTag = el },
            h("slot", null)));
    }
    static get is() { return "p-text"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["text.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["text.css"]
    }; }
    static get properties() { return {
        "tag": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "| 'p'\n  | 'span'\n  | 'div'\n  | 'address'\n  | 'blockquote'\n  | 'figcaption'\n  | 'cite'\n  | 'time'\n  | 'legend'",
                "resolved": "\"address\" | \"blockquote\" | \"cite\" | \"div\" | \"figcaption\" | \"legend\" | \"p\" | \"span\" | \"time\"",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Sets a custom HTML tag depending of the usage of the text component."
            },
            "attribute": "tag",
            "reflect": false,
            "defaultValue": "'p'"
        },
        "size": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "BreakpointCustomizable<TextSize>",
                "resolved": "BreakpointValues<TextSize> | string",
                "references": {
                    "BreakpointCustomizable": {
                        "location": "import",
                        "path": "../../../../utils"
                    },
                    "TextSize": {
                        "location": "import",
                        "path": "../../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Size of the text. Also defines the size for specific breakpoints, like {base: \"small\", l: \"medium\"}. You always need to provide a base value when doing this."
            },
            "attribute": "size",
            "reflect": false,
            "defaultValue": "'small'"
        },
        "weight": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "TextWeight",
                "resolved": "\"bold\" | \"regular\" | \"thin\"",
                "references": {
                    "TextWeight": {
                        "location": "import",
                        "path": "../../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The weight of the text."
            },
            "attribute": "weight",
            "reflect": false,
            "defaultValue": "'regular'"
        },
        "align": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'left' | 'center' | 'right'",
                "resolved": "\"center\" | \"left\" | \"right\"",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Text alignment of the component."
            },
            "attribute": "align",
            "reflect": false,
            "defaultValue": "'left'"
        },
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'brand' | 'default' | 'neutral-contrast-high' | 'neutral-contrast-medium' | 'neutral-contrast-low' | 'notification-success' | 'notification-warning' | 'notification-error' | 'inherit'",
                "resolved": "\"brand\" | \"default\" | \"inherit\" | \"neutral-contrast-high\" | \"neutral-contrast-low\" | \"neutral-contrast-medium\" | \"notification-error\" | \"notification-success\" | \"notification-warning\"",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Basic text color variations depending on theme property."
            },
            "attribute": "color",
            "reflect": false,
            "defaultValue": "'default'"
        },
        "ellipsis": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Adds an ellipsis to a single line of text if it overflows."
            },
            "attribute": "ellipsis",
            "reflect": false,
            "defaultValue": "false"
        },
        "theme": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "Theme",
                "resolved": "\"dark\" | \"light\"",
                "references": {
                    "Theme": {
                        "location": "import",
                        "path": "../../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Adapts the text color depending on the theme. Has no effect when \"inherit\" is set as color prop."
            },
            "attribute": "theme",
            "reflect": false,
            "defaultValue": "'light'"
        }
    }; }
    static get elementRef() { return "element"; }
}
