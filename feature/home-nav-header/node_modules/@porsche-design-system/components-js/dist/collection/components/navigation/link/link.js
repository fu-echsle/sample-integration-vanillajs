import { Component, Element, h, Prop } from '@stencil/core';
import cx from 'classnames';
import { mapBreakpointPropToPrefixedClasses, prefix, insertSlottedStyles } from '../../../utils';
import { improveFocusHandlingForCustomElement } from '../../../utils/focusHandling';
export class Link {
    constructor() {
        /** The style variant of the link. */
        this.variant = 'secondary';
        /** The icon shown. */
        this.icon = 'arrow-head-right';
        /** A custom URL path to a custom icon. */
        this.iconSource = undefined;
        /** When providing an url then the component will be rendered as `<a>`. */
        this.href = undefined;
        /** Adapts the link color when used on dark background. */
        this.theme = 'light';
        /** Target attribute where the link should be opened. */
        this.target = '_self';
        /** Special download attribute to open native browser download dialog if target url points to a downloadable file. */
        this.download = undefined;
        /** Specifies the relationship of the target object to the link object. */
        this.rel = undefined;
        /** Show or hide label. For better accessibility it is recommended to show the label. */
        this.hideLabel = false;
    }
    componentDidLoad() {
        const tagName = this.element.tagName.toLowerCase();
        const style = `a:focus ${tagName} {
      outline: 2px solid #00d5b9;
      outline-offset: 1px;
    }`;
        insertSlottedStyles(this.element, style);
        improveFocusHandlingForCustomElement(this.element);
    }
    render() {
        const TagType = this.href === undefined ? 'span' : 'a';
        const linkClasses = cx(prefix('link'), prefix(`link--${this.variant}`), mapBreakpointPropToPrefixedClasses('link-', this.hideLabel, ['without-label', 'with-label']), prefix(`link--theme-${this.theme}`));
        const iconClasses = prefix('link__icon');
        const labelClasses = prefix('link__label');
        return (h(TagType, Object.assign({ class: linkClasses }, (TagType === 'a' ? {
            href: this.href,
            target: `${this.target}`,
            download: this.download,
            rel: this.rel
        } : null)),
            h("p-icon", { class: iconClasses, size: 'inherit', name: this.icon, source: this.iconSource, color: 'inherit', "aria-hidden": 'true' }),
            h("p-text", { tag: 'span', color: 'inherit', class: labelClasses },
                h("slot", null))));
    }
    static get is() { return "p-link"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["link.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["link.css"]
    }; }
    static get properties() { return {
        "variant": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'primary' | 'secondary' | 'tertiary'",
                "resolved": "\"primary\" | \"secondary\" | \"tertiary\"",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The style variant of the link."
            },
            "attribute": "variant",
            "reflect": false,
            "defaultValue": "'secondary'"
        },
        "icon": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "IconName",
                "resolved": "\"light\" | \"reset\" | \"360\" | \"add\" | \"adjust\" | \"arrow-double-down\" | \"arrow-double-left\" | \"arrow-double-right\" | \"arrow-double-up\" | \"arrow-down\" | \"arrow-first\" | \"arrow-head-down\" | \"arrow-head-left\" | \"arrow-head-right\" | \"arrow-head-up\" | \"arrow-last\" | \"arrow-left\" | \"arrow-right\" | \"arrow-up\" | \"augmented-reality\" | \"battery-empty\" | \"broadcast\" | \"calculator\" | \"calendar\" | \"camera\" | \"car\" | \"card\" | \"charging-station\" | \"chart\" | \"chat\" | \"check\" | \"city\" | \"clock\" | \"close\" | \"closed-caption\" | \"co2-emission\" | \"compare\" | \"configurate\" | \"country-road\" | \"cubic-capacity\" | \"delete\" | \"disable\" | \"document\" | \"download\" | \"duration\" | \"edit\" | \"email\" | \"exclamation\" | \"external\" | \"filter\" | \"flash\" | \"fuel-station\" | \"gift\" | \"globe\" | \"grid\" | \"highway\" | \"home\" | \"image\" | \"increase\" | \"information\" | \"leaf\" | \"leather\" | \"list\" | \"locate\" | \"lock\" | \"lock-open\" | \"logo-baidu\" | \"logo-delicious\" | \"logo-digg\" | \"logo-facebook\" | \"logo-foursquare\" | \"logo-gmail\" | \"logo-google\" | \"logo-hatena\" | \"logo-instagram\" | \"logo-kaixin\" | \"logo-linkedin\" | \"logo-pinterest\" | \"logo-qq\" | \"logo-qq-share\" | \"logo-skyrock\" | \"logo-sohu\" | \"logo-tecent\" | \"logo-telegram\" | \"logo-tumblr\" | \"logo-twitter\" | \"logo-viber\" | \"logo-vk\" | \"logo-wechat\" | \"logo-weibo\" | \"logo-whatsapp\" | \"logo-xing\" | \"logo-yahoo\" | \"logo-youku\" | \"logo-youtube\" | \"logout\" | \"menu-dots-horizontal\" | \"menu-lines\" | \"minus\" | \"mobile\" | \"moon\" | \"oil-can\" | \"pause\" | \"phone\" | \"pin\" | \"play\" | \"plug\" | \"plus\" | \"printer\" | \"purchase\" | \"question\" | \"racing-flag\" | \"refresh\" | \"replay\" | \"route\" | \"rss\" | \"save\" | \"screen\" | \"search\" | \"share\" | \"shopping-cart\" | \"snowflake\" | \"sort\" | \"stack\" | \"star\" | \"steering-wheel\" | \"stopwatch\" | \"subtract\" | \"sun\" | \"switch\" | \"tablet\" | \"tachometer\" | \"truck\" | \"upload\" | \"user\" | \"user-group\" | \"video\" | \"view\" | \"view-off\" | \"volume-off\" | \"volume-up\" | \"warning\" | \"weight\" | \"wifi\" | \"work\" | \"wrench\" | \"zoom-in\" | \"zoom-out\"",
                "references": {
                    "IconName": {
                        "location": "import",
                        "path": "../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "The icon shown."
            },
            "attribute": "icon",
            "reflect": false,
            "defaultValue": "'arrow-head-right'"
        },
        "iconSource": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "A custom URL path to a custom icon."
            },
            "attribute": "icon-source",
            "reflect": false,
            "defaultValue": "undefined"
        },
        "href": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "When providing an url then the component will be rendered as `<a>`."
            },
            "attribute": "href",
            "reflect": false,
            "defaultValue": "undefined"
        },
        "theme": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "Theme",
                "resolved": "\"dark\" | \"light\"",
                "references": {
                    "Theme": {
                        "location": "import",
                        "path": "../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Adapts the link color when used on dark background."
            },
            "attribute": "theme",
            "reflect": false,
            "defaultValue": "'light'"
        },
        "target": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "LinkTarget",
                "resolved": "string",
                "references": {
                    "LinkTarget": {
                        "location": "import",
                        "path": "../../../types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Target attribute where the link should be opened."
            },
            "attribute": "target",
            "reflect": false,
            "defaultValue": "'_self'"
        },
        "download": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Special download attribute to open native browser download dialog if target url points to a downloadable file."
            },
            "attribute": "download",
            "reflect": false,
            "defaultValue": "undefined"
        },
        "rel": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Specifies the relationship of the target object to the link object."
            },
            "attribute": "rel",
            "reflect": false,
            "defaultValue": "undefined"
        },
        "hideLabel": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "BreakpointCustomizable<boolean>",
                "resolved": "BreakpointValues<boolean> | boolean | string",
                "references": {
                    "BreakpointCustomizable": {
                        "location": "import",
                        "path": "../../../utils"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": "Show or hide label. For better accessibility it is recommended to show the label."
            },
            "attribute": "hide-label",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get elementRef() { return "element"; }
}
